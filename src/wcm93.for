c wcm93.for, JI@WAVE, 3/5/00
c
      SUBROUTINE WCM93(UB,AB,UR,PHIBAR,ZR,KB,USC,USCW,fcw)
C
C  MODIFIED BY C.K.Z. ON 7/25/95
C
C        NEATRAL, NEAR BOTTOM, WAVE & CURRENT MODEL.
C        APPROXIMATE VERSION - 1993
C
C        COPYRIGHT (C) 1993 SCOTT M. GLENn
C
C        ADDRESS:
C          INSTITUTE OF MARINE AND COASTAL SCIENCEs
C          RUTGERS UNIVERSITy
C          PO BOX 231
C          NEW BRUNSWICK, NEW JERSEY 08903-0231
C        PHONE:
C          908-932-6555 X544
C        EMAIL:
C          GLENN@CARIBBEAN.RUTGERS.EDu
C          S.GLENN/OMNET
C
C
C        INPUT:
c
C          WAVE PARAMETERS:
C           UB = WAVE MAXIMUM BOTTOM ORBITAL SPEEd (m/s)
C           AB = WAVE BOTTOM EXCURSION AMPLITUDe   (m)
c
C          CURRENT PARAMTERS:
C           UR = CURRENT SPEED AT ZR (m/s)
C           PHIBAR = CURRENT DIRECTION RELATIVE TO WAVES (0 TO PI/2 RADIANS)
C           ZR = HEIGHT ABOVE BED FOR OBSERVED CURRENT UR (m)
c
C          BOTTOM FLAG:
C           IRR = RELATIVE ROUGHNESS FLAG: 1 FOR CALCULATED,
C                 0 FOR GIVEN
CJKL
C		IRR = 0 FOR USE IN ECOM-SIZ
CJKL
c
C          BOTTOM PARAMTERS FOR IRR=0:
C            KB = GIVEN RELATIVE ROUGHNESs (m)
c
C          BOTTOM PARAMTERS FOR IRR=1:
CJKL
C		NOT USED IN ECOM-SIZ
CJKL
C            DR = SEDIMENT DIAMETEr
C            SR = SEDIMENT SPECIFIC GRAVITY
C            G = ACCELERATION OF GRAVITY
C            VIS = KINEMATIC VISCOSITY OF WATER
C            SCFR = SHIELDS PARAMTER CORRECTION FACTOR
c
C         WARNING: USE CONSISTENT UNITS ON ALL INPUTS!
c
c
C        OUTPUT:
c
C          DIMENSIONAL RESULTS:
C            Z0 = PHYSICAL Z-INTERCEPT FOR CURRENT PROFILE
C            Z0C = APPARENT Z-INTERCEPT FOR THE CURRENT PROFILE ABOVE THE WBl
C            USC = SHEAR VELOCITY ASSOCIATED WITH TIME AVERAGE SHEAR STRESs
C            USCW = SHEAR VELOCITY ASSOCIATED WITH MAXIMUM SHEAR STRESs
C            DW = HEIGHT OF WAVE BOUNDARY LAYEr
C            UCDW = CURRENT VELOCITY AT TOP OF WAVE BOUNDARY LAYEr
C            CD = DRAG COEFFICIENT ASSOCIATED WITH UR AT ZR
c
C          INTERMEDIATE NONDIMENSIONAL RESULTS:
C            URUB = UR/Ub
C            UAUB = UA/Ub
C            PHI = ANGLE BETWEEN UA AND UB (0 TO PI/2 RADIANS)
C            V2 = PARAMTER ASSOCIATED WITH TIME AVERAGE SHEAR STRESs
C            ALPHA = PARAMTER ASSOCIATED WITH MAXIMUM SHEAR STRESs
C            KSFR = PARAMETER K IN SKIN FRICTION FACTOR EQUATIOn
C            FCWSFR = SKIN FRICTION FACTOR
C            K = PARAMETER K IN FRICTION FACTOR EQUATIOn
C            FCW = FRICTION FACTOr
C            SHLDCR = CRITICAL SHIELDS PARAMETEr
C            SHLDBR = BREAKOFF SHIELDS PARAMETEr
C            SHLDMR = MAXIMUM SHIELDS PARAMETEr
C            ETAAB = (RIPPLE HEIGHT)/Ab
C            ETALAM = (RIPPLE HEIGHT)/(RIPPLE WAVELENGTH) = (RIPPLE STEEPNESS)
C            KBABRP = RIPPLE RELATIVE ROUGHNESs
C            KBABST = SEDIMENT TRANSPORT RELATIVE ROUGHNESs
C            KBAB = KB/AB = TOTAL RELATIVE ROUGHNESs
C            USCUB = USC/Ub
C            USCWUB = USCW/Ub
C            DWAB = DW/Ab
C            KBCKB = KBC/Kb
C            KBCAB = KBC/Ab
C            Z0AB = Z0/Ab
C            Z0CAB = Z0C/Ab
C
C
C
c
C
C        NEWTON-RAPHSON METHOD TO FIND UAUB:
C          GUESS UAUB,
C          SUBROUTINE USTR CALCULATES MODEL PARAMETERS,
C          URUB IS CALCULATED WITH NEUTRAL EQUATION,
C          CALCULATED URUB IS COMPARED TO GIVEN URUB,
C          ITERATE UNTIL DIFFERENCE IS LESS THAN ALLOWABLE ERROR.
C
      REAL KB,K,KSFR,KBAB,KBABG,KBABRP,KBABST,KBCAB,KBCKB,KAPPA
C
C        INITIALIZE VARIABLES.
C
      DATA ERROR/0.01/, KAPPA/0.4/, NGUESS/30/
C
      IRR=0
c
C      CALCULATE CURRENT PARAMETERS
c
      URUBG=UR/Ub
      ZRAB=ZR/Ab
c
C      CALCULATE BOTTOM ROUGHNESS OR SEDIMENT PARAMETERs
c
      IF(IRR .EQ. 0) THEN
           KBABG=KB/AB
           KBAB=KBABG
        ELSE
cji        SGDR=SQRT((SR-1.0)*G*DR)    ! IRR=0 in this case, so not used, Ji, 3/5/00
cji        DABR=DR/AB
cji        SSTARR=DR/4.0/VIS*SGDr
cji        SGDUBR=SGDR/Ub
        ENDIf
c
C       CALCULATE FIRST GUESS FOR UAUb
c
      IF(URUBG .LT. 1.0) THEn
           UAUB0=URUBG*URUBg
         ELSe
           UAUB0=URUBg
         ENDIf
      IF(UAUB0 .GE. 500.) UAUB0=1000.
      I=0
C
C        TRY FIRST GUESS.
C
   10 UAUB1=UAUB0
      I=I+1
      CALL USTR(UAUB1,PHIBAR,PHI,V2,ALPHA,IRR,DABR,KSFR,
     $FCWSFR,SR,SSTARR,SGDUBR,SCFR,SHLDCR,SHLDBR,SHLDMR,
     $ETAAB,ETALAM,KBABRP,KBABST,KBAB,K,FCW,
     $USCUB,USCWUB,DWAB,KBCKB,KBCAB,Z0AB,Z0CAB)
C
      URUB1=(USCUB/KAPPA)*ALOG(ZRAB/Z0CAB)
C
C        TRY SECOND GUESS.
C
      UAUB2=UAUB1*2
      IF(URUB1 .GT. URUBG) UAUB2=UAUB1/10.0
      IF(URUB1 .LT. URUBG .AND. UAUB0 .GE. 1000.) GO TO 200
      I=I+1
      CALL USTR(UAUB2,PHIBAR,PHI,V2,ALPHA,IRR,DABR,KSFR,
     $FCWSFR,SR,SSTARR,SGDUBR,SCFR,SHLDCR,SHLDBR,SHLDMR,
     $ETAAB,ETALAM,KBABRP,KBABST,KBAB,K,FCW,
     $USCUB,USCWUB,DWAB,KBCKB,KBCAB,Z0AB,Z0CAB)
C
      URUB2=(USCUB/KAPPA)*ALOG(ZRAB/Z0CAB)
C
C        CALCULATE NEXT GUESS.
C        IF UAUB .LE. 0, FIRST GUESS WAS TOO LARGE.
C
   20 UAUB=UAUB2-(URUB2-URUBG)*(UAUB2-UAUB1)/(URUB2-URUB1)
      IF(UAUB .GT. 1000.) UAUB=1000.
      IF(UAUB .GT. 0.0) GO TO 30
      IF(I .GE. NGUESS) GO TO 100
      UAUB0=UAUB0/100.0
      GO TO 10
   30 I=I+1
      CALL USTR(UAUB,PHIBAR,PHI,V2,ALPHA,IRR,DABR,KSFR,
     $FCWSFR,SR,SSTARR,SGDUBR,SCFR,SHLDCR,SHLDBR,SHLDMR,
     $ETAAB,ETALAM,KBABRP,KBABST,KBAB,K,FCW,
     $USCUB,USCWUB,DWAB,KBCKB,KBCAB,Z0AB,Z0CAB)
C
      URUB=(USCUB/KAPPA)*ALOG(ZRAB/Z0CAB)
C
C        IF PERCENT DIFFERENCE BETWEEN CALCULATED & GIVEN
C        URUB IS GREATER THAN ALLOWABLE ERROR, ITERATE.
C
      IF(URUB1 .LT. URUBG .AND. UAUB0 .GE. 1000.) GO TO 200
      IF(ABS((URUBG-URUB)/URUBG) .LT. ERROR) GO TO 100
      IF(I .GE. NGUESS) GO TO 100
      UAUB1=UAUB2
      URUB1=URUB2
      UAUB2=UAUB
      URUB2=URUB
      GO TO 20
c
c
C        CALCULATE WAVE AND CURRENT OUTPUT PARAMETERs
c
  100 CONTINUe
      Z0=Z0AB*Ab
      Z0C=Z0CAB*Ab
      USC=USCUB*Ub
      USCW=USCWUB*Ub
      DW=DWAB*Ab
      UCDW=(USC/KAPPA)*(ALOG(DW/Z0C))
      CD=(USC/UR)**2
      RETURn
c
C        CALCULATE PURE CURRENT OUTPUT PARAMTERS
c
  200 CONTINUE
      Z0=KB/30.
      Z0C=Z0
      USC=UR*KAPPA/(ALOG(ZR/Z0))
      USCW=USc
      DW=KAPPA*USCW*AB/Ub
      UCDW=(USC/KAPPA)*(ALOG(DW/Z0C))
      CD=(USC/UR)**2
      RETURn
c
      ENd
c
c
c
c
c
c
c
      SUBROUTINE USTR(UAUB,PHIBAR,PHI,V2,ALPHA,
     $IRR,DABR,KSFR,FCWSFR,
     $SR,SSTARR,SGDUBR,SCFR,
     $SHLDCR,SHLDBR,SHLDMR,
     $ETAAB,ETALAM,KBABRP,KBABST,KBAB,K,FCW,
     $USCUB,USCWUB,DWAB,KBCKB,KBCAB,Z0AB,Z0CAB)
C
C        CALCULATE MODEL PARAMETERS.
C
      REAL K,KSFR,KBAB,KBABRP,KBABST,KBCAB,KBCKB,KAPPA
C
C        CALCULATE PHI.
C
      CALL PHIC(UAUB,PHIBAR,PHI)
C
C        CALCULATE V2 & ALPHA.
C
      CALL V2AL(UAUB,PHI,V2,ALPHA)
C
C     CALCULATE SKIN FRICTION FACTOR USING DABR IF REQUIRED.
C
      IF(IRR .EQ. 0) GO TO 10
      CALL FF(UAUB,PHIBAR,DABR,V2,ALPHA,KSFR,FCWSFR)
C
C        CALCULATE RELATIVE ROUGHNESS IF REQUIRED.
C
      CALL ROUGH(DABR,SR,SSTARR,SGDUBR,SCFR,
     $UAUB,PHI,FCWSFR,SHLDCR,SHLDBR,SHLDMR,
     $ETAAB,ETALAM,KBABRP,KBABST,KBAB)
C
C        CALCULATE FRICTION FACTOR USING KBAB.
C
   10 CONTINUE
      CALL FF(UAUB,PHIBAR,KBAB,V2,ALPHA,K,FCW)
C
C        CALCULATE REMAINING MODEL PARAMETERS.
C
      KAPPA=0.4
      USCUB=SQRT(0.5*FCW*V2)
      USCWUB=SQRT(0.5*FCW*ALPHA)
      DWAB=2.0*KAPPA*USCWUB
      KBCKB=(60.0*KAPPA*USCWUB/KBAB)**(1.0-USCUB/USCWUB)
      KBCAB=KBCKB*KBAB
      Z0AB=KBAB/30.0
      Z0CAB=KBCAB/30.0
      UDWUB=USCUB/KAPPA*ALOG(DWAB/Z0CAB)
      RETURN
      END
C
C
C
C
C
      SUBROUTINE PHIC(UAUB,PHIBAR,PHI)
C
C         CALCULATE PHI.
C
C         CALCULATE PHI USING SMALL UAUB APPROXIMATION.
C
      DTOR=3.14159265/180.0
      PHIBRD=PHIBAR/DTOR
      IF(PHIBRD .GE. 89.999)
     &PHI=PHIBAR
      IF(PHIBRD .LT. 89.999)
     &PHI=ATAN(2.0*TAN(PHIBAR))
C
C        CALCULATE CORRECTION FACTOR.
C
C
      IF(PHIBRD .GT. 10.0) GO TO 10
      DEL=0.5*PHIBRD
      GO TO 60
C
   10 IF(PHIBRD .GT. 20.0) GO TO 20
      DEL=0.4*(PHIBRD-10.0)+5.0
      GO TO 60
C
   20 IF(PHIBRD .GT. 30.0) GO TO 30
      DEL=0.2*(PHIBRD-20.0)+9.0
      GO TO 60
C
   30 IF(PHIBRD .GT. 40.0) GO TO 40
      DEL=11.0
      GO TO 60
C
   40 IF(PHIBRD .GT. 80.0) GO TO 50
      DEL=-0.2*(PHIBRD-40.0)+11.0
      GO TO 60
C
   50 DEL=-0.3*(PHIBRD-80.0)+3.0
C
C        CORRECT SMALL UAUB APPROXIMATION FOR PHI.
C
   60 PHI=PHI-UAUB*DEL*DTOR
      IF(PHI .LT. PHIBAR) PHI=PHIBAR
      RETURN
      END
C
C
C
c
c
c
c
      SUBROUTINE V2AL(UAUB,PHI,V2,ALPHA)
c
C        CALCULATE V2 & ALPHA.
C        APPROXIMATE SOLUTIOn
c
C        CALCULATE ALPHA.
c
      REAL NINETy
      ALPHA=1+(UAUB**2)+2.0*UAUB*COS(PHI)
c
C        CALCULATE APPROXIMATE SOLUTION FOR V2.
c
      PI=3.14159265
      NINETY=1.570796
c
      UAUBS=0.40-0.25*PHI/NINETy
      UAUBL=UAUBS+0.4
c
      IF(UAUB .GT. UAUBS) GO TO 10
      V2=(2.0/PI)*UAUB*SQRT(4.0-3.0*(SIN(PHI)**2))
      RETURn
c
   10 IF(UAUB .LT. UAUBL) GO TO 20
      V2=UAUB**2+0.5-
     &(0.25+.042925*EXP(-1.21265*(UAUB-0.85)))*(SIN(PHI))**2
      RETURN
C
   20 V2S=(2.0/PI)*UAUB*SQRT(4.0-3.0*(SIN(PHI)**2))
      V2L=UAUB**2+0.5-
     &(0.25+.042925*EXP(-1.21265*(UAUB-0.85)))*(SIN(PHI))**2
      X=(UAUB-UAUBS)/0.4
      V2=V2S*(1.-X)+V2L*x
      RETURN
      END
c
c
c
c
c
c
c
      SUBROUTINE FF(UAUB,PHIBAR,KBABG,V2,ALPHA,K,FCW)
c
C   NEWTON-RAPHSON METHOD TO SOLVE FRICTION FACTOR EQUATION.
C          GUESS FCW,
C          SUBROUTINE FFLHS CALCULATES LEFT HAND SIDE,
C          COMPARE LEFT HAND SIDE WITH RIGHT HAND SIDE,
C          ITERATE UNTIL DIFFERENCE IS LESS THAN ALLOWABLE ERROR.
c
      REAL K,KBAB,KBABG,LHS,LHS1,LHS2
c
      ERROR=0.03
      MIN=0
      MAX=10
      M=0
c
C        CALCULATE RIGHT HAND SIDE.
C
      Y=V2/2.0/(ALPHA**.25)
      RHS=((ALPHA**1.5)/4)-(Y**2)
C
C        CALCULATE APPROXIMATE PURE WAVE FRICTION FACTOR.
C
      KBAB=KBABG
      IF(KBAB .GT. 1.0) KBAB=1.0
      N=1-ALOG10(KBAB)
      GO TO (1,2,3,4,5,6) n
      GO TO 6
    1 FCW0=0.236173*KBAB**0.617881
      GO TO 7
    2 FCW0=0.158894*KBAB**0.445759
      GO TO 7
    3 FCW0=0.0927407*KBAB**0.328840
      GO TO 7
    4 FCW0=0.0549209*KBAB**0.252996
      GO TO 7
    5 FCW0=0.0345843*KBAB**0.202781
      GO TO 7
    6 FCW0=0.0231884*KBAB**0.168060
    7 CONTINUE
      FCW00=FCW0
c
C        FIRST GUESS.
c
   10 CONTINUe

      IF(UAUB .LE. 0.2) THEn
           FCW1=FCW0
           GO TO 11
           ENDIf
      IF(UAUB .LE. 4.0) THEn
           FCW1=FCW0/(1.+2.*(UAUB-.2)/3.8)
         ELSe
           FCW1=FCW0/(1+UAUB**.5)
         ENDIf
   11 CONTINUe
      CALL FFLHS(PHIBAR,KBAB,V2,ALPHA,Y,K,FCW1,LHS1)
      M=M+1
c
C        SECOND GUESS.
c
      IF(UAUB .LE. 4.0) THEn
         FCW2=FCW0/(1.001+UAUB**1.2)
         GO TO 12
         ENDIf
      IF(RHS .LT. LHS1) THEn
          FCW2=FCW1*2.0
        ELSe
          FCW2=FCW1/2.0
        ENDIf
   12 CONTINUe
      CALL FFLHS(PHIBAR,KBAB,V2,ALPHA,Y,K,FCW2,LHS2)
      M=M+1
c
C        CALCULATE NEXT GUESS.
C        IF FCW .LE. 0.0, FIRST GUESS WAS TOO LARGE.
c
      MIN=MIN+1
      DO 40 I=MIN,MAx
      FCW=FCW2-(LHS2-RHS)*(FCW2-FCW1)/(LHS2-LHS1)
      IF(FCW .GT. 0.0) GO TO 30
      FCW0=FCW0/10.0
      GO TO 10
   30 CALL FFLHS(PHIBAR,KBAB,V2,ALPHA,Y,K,FCW,LHS)
      M=M+1
C
C        IF PERCENT DIFFERENCE BETWEEN LHS & RHs
C        IS GREATER THAN ALLOWABLE ERROR, ITERATE.
C
      FCW1=FCW2
      LHS1=LHS2
      FCW2=FCW
      LHS2=LHS
      IF(ABS((LHS-RHS)/RHS) .LT. ERROR) GO TO 50
   40 CONTINUe
   50 CONTINUe
c
C         CALCULATE FINAL GUESs
c
      IF(LHS2.EQ.LHS1) THEN
        FCW=FCW2
      ELSE
	IF(LHS2.EQ.LHS1)PRINT *,LHS2,LHS1,RHS
        FCW=FCW2-(LHS2-RHS)*(FCW2-FCW1)/(LHS2-LHS1)
      END IF
      IF(FCW .GT. 0.0) GO TO 60
c
C        FIX NEGATIVE FRICTION FACTOr
c
      IF(FCW2 .GT. 0.0) THEn
         FCW=FCW2
         GO TO 60
         ENDIf
      IF(FCW1 .GT. 0.0) THEn
         FCW=FCW1
         GO TO 60
         ENDIf
      IF(UAUB .LE. 0.2) THEn
           FCW=FCW00
           GO TO 60
           ENDIf
      IF(UAUB .LE. 4.0) THEn
           FCW=FCW00/(1.+2.*(UAUB-.2)/3.8)
           GO TO 60
           ENDIf
      FCW=FCW00/(1+UAUB**.5)
c
C     CHECK THAT POSITIVE FRICTION FACTOR IS NOT TOO LARGe
c
   60 CONTINUe
      IF(FCW .GT. 0.236173) FCW=0.236173
      RETURN
      END
C
C
c
c
c
c
C
C
      SUBROUTINE FFLHS(PHIBAR,KBAB,V2,ALPHA,Y,K,FCW,LHS)
C
C        CALCULATE LEFT HAND SIDE OF FRICTION FACTOR EQUATION.
C
      REAL K,KER,KEI,KBAB,LHS
      X=0.686586*SQRT(KBAB/SQRT(FCW*ALPHA))
      CALL KLVNA(X,BER,BEI,KER,KEI)
      K=1.0/X/SQRT(KER**2+KEI**2)
      Z=0.0970984*SQRT(KBAB)*K/(FCW**.75)
      LHS=(Z**2)+2.0*Z*Y*COS(PHIBAR)
      RETURN
      END
c
c
c
c
c
c
c
c
c
      SUBROUTINE KLVNA(X,BER,BEI,KER,KEI)
C
C        CALCULATE ZEROTH ORDER KELVIN FUNCTIONS OF X (X .LT. 1.5),
C        FROM ABRAMOWITZ & STEGUN,
C        HANDBOOK OF MATHEMATICAL FUNCTIONS, PAGE 384.
C
      REAL KER,KEI
      PI=3.14159265
      X2=X/2.0
      X8=X/8.0
C
      BER=1.-64.*(X8**4)+113.77777774*(X8**8)-32.36345652*(X8**12)
C
      BEI=16.*(X8**2)-113.77777774*(X8**6)+72.81777742*(X8**10)
C
      KER=-BER*ALOG(X2)+PI/4.*BEI-.57721566-59.05819744*(X8**4)
     $+171.36272133*(X8**8)-60.60977451*(X8**12)
C
      KEI=-BEI*ALOG(X2)-PI/4.*BER+6.76454936*(X8**2)
     $-142.91827687*(X8**6)+124.23569650*(X8**10)
C
      RETURN
      END
c
c
c
c
c
c
c
c
c
      SUBROUTINE ROUGH(DAB,S,SSTAR,SGDUB,SCF,
     $UAUB,PHI,FCWSF,SHLDC,SHLDB,SHLDM,
     $ETAAB,ETALAM,KBABRP,KBABST,KBAB)
C
C        CALCULATE RELATIVE ROUGHNESS DUE TO
C        RIPPLES AND NEAR BED SEDIMENT TRANSPORT.
C
      REAL KBABRP,KBABST,KBAB
c
C
C        CALCULATE CRITICAL, MAXIMUM AND BREAKOFF
C        SHIELDS PARAMETERS.
C
      CALL CSHLD(SSTAR,SCF,SHLDC)
      X=(1.0+UAUB*COS(PHI))**2+(UAUB*SIN(PHI))**2
      SHLDM=FCWSF/SGDUB/SGDUB/2.0*X
      SMSC=SHLDM/SHLDC
C
C        CALCULATE RIPPLE ROUGHNESS
C        FROM CALCULATED RIPPLE GEOMETRY.
C
C
C        MAXIMUM SHIELDS .LT. CRITICAL SHIELDS.
C        NO SEDIMENT TRANSPORT, KBAB=DAB.
C
      IF(SMSC .LT. 1.0) THEn
          ETAAB=0.0
          ETALAM=0.0
          KBABRP=0.0
          KBABST=0.0
          KBAB=DAb
          RETURn
          ENDIf
c
C
C        MAXIMUM SHIELDS .LT. BREAKOFF SHIELDS.
C
      SBSC=1.8*SSTAR**0.6
      SHLDB=SBSC*SHLDC
      IF(SMSC .LE. SBSC) THEn
            ETAAB=0.22*(SMSC**(-0.16))
            ETALAM=0.16*(SMSC**(-0.04))
            KBABRP=27.7*ETAAB*ETALAM
            GO TO 10
            ENDIf
C
C        MAXIMUM SHIELDS .GT. BREAKOFF SHIELDS.
C
       ETAAB=0.48*(SSTAR**0.8)*(SMSC**(-1.5))
       ETALAM=0.28*(SSTAR**0.6)*(SMSC**(-1.0))
       KBABRP=27.7*ETAAB*ETALAM
C
C        CALCULATE NEAR BED SEDIMENT TRANSPORT ROUGHNESS.
C
   10 CONTINUe
      Y=(SQRT(SHLDM)-0.7*SQRT(SHLDC))**2
      KBABST=160.*(S+0.5)*DAB*Y
C
C        CALCULATE TOTAL ROUGHNESS.
C
      KBAB=KBABRP+KBABST
      IF(DAB .GT. KBAB) KBAB=DAB
      RETURN
      END
c
c
c
c
c
c
c
c
      SUBROUTINE CSHLD(SSTAR,SCF,SHLDC)
C
C        CALCULATE CRITICAL SHIELDS PARAMETER
C        FOR INITIATION OF SEDIMENT MOTION
C        FROM SHIELDS DIAGRAM.
C        SCF IS CORRECTION FACTOR.
C
C
      IF(SSTAR .GT. 1.5) GO TO 10
      SHLDC=SCF*0.0932*SSTAR**(-.707)
      RETURN
C
   10 IF(SSTAR .GT. 4.0) GO TO 20
      SHLDC=SCF*0.0848*SSTAR**(-.473)
      RETURN
C
   20 IF(SSTAR .GT. 10.0) GO TO 30
      SHLDC=SCF*0.0680*SSTAR**(-.314)
      RETURN
C
   30 IF(SSTAR .GT. 34.0) GO TO 40
      SHLDC=SCF*0.033
      RETURN
C
   40 IF(SSTAR .GT. 270.) GO TO 50
      SHLDC=SCF*0.0134*SSTAR**.255
      RETURN
C
   50 SHLDC=SCF*0.056
      RETURN
      END
C
