C 
C**********************************************************************C
C**********************************************************************C
C**********************************************************************C
C
      SUBROUTINE INPUT(TITLE)
C
C**********************************************************************C
C
C **  SUBROUTINE INPUT READS ALL INPUT DATA EXCEPT DATA IN LXLY.INP,
C **  MASK.INP AND RESTART.INP
C
C **  LAST MODIFIED BY JOHN HAMRICK ON 10 april 1999
C
C**********************************************************************C
C
      INCLUDE 'efdc.par'
      INCLUDE 'efdc.cmn'
C
      DIMENSION RMULADS(NSTM),ADDADS(NSTM)
      REAL  RDSED
C
C     DIMENSION CQSE(5),WKQ(KCM)
C
C**********************************************************************C
C
      CHARACTER*80 TEXT,TITLE
      CHARACTER*10 CDUM
C
C**********************************************************************C
C
      G=9.81
      PI=3.1415926535898
      PI2=2.*PI
    1 FORMAT (120X)
    2 FORMAT (A80)
C
C**********************************************************************C
C**********************************************************************C
C
C **  READ MAIN INPUT FILE efdc.inp
C
      OPEN (1,FILE='efdc.inp',STATUS='UNKNOWN')
C
C**********************************************************************C
C
C1**  READ TITLE CARD
C
      NCARD=1
      DO NSKIP=1,18
      READ(1,1)
      END DO
      READ(1,2) TITLE
      WRITE(7,1002)NCARD
      WRITE(7,2) TITLE
C
C2**  READ RESTART AND DIAGNOSTIC SWITCHES
C
      NCARD=2
      DO NSKIP=1,25
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISRESTI,ISRESTO,ISRESTR,ISPAR,ISLOG,ISDIVEX,
     $          ISNEGH,ISMMC,ISBAL,ISHP,ISHOW
      WRITE(7,1002)NCARD
      WRITE(7,*) ISRESTI,ISRESTO,ISRESTR,ISPAR,ISLOG,ISDIVEX,
     $          ISNEGH,ISMMC,ISBAL,ISHP,ISHOW
      IF(ISO.GT.0) GO TO 100
C
C3**  READ RELAXATION PARAMETERS
C
      NCARD=3
      DO NSKIP=1,24
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) RP,RSQM,ITERM,IRVEC,RPADJ,
     &                 RSQMADJ,ITRMADJ,ITERHPM,IDRYCK,ISDSOLV,FILT3TL
      WRITE(7,1002)NCARD
      WRITE(7,*) RP,RSQM,ITERM,IRVEC,RPADJ,
     &                 RSQMADJ,ITRMADJ,ITERHPM,IDRYCK,ISDSOLV,FILT3TL
      IF(ISO.GT.0) GO TO 100
C
C4**  READ LONGTERM MASS TRANSPORT INTEGRATION ONLY SWITCHES
C
      NCARD=4
      DO NSKIP=1,19
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISLTMT,ISSSMMT,ISLTMTS,ISIA,RPIA,RSQMIA,
     $                     ITRMIA
      WRITE(7,1002)NCARD
      WRITE(7,*) ISLTMT,ISSSMMT,ISLTMTS,ISIA,RPIA,RSQMIA,
     $                     ITRMIA
      IF(ISO.GT.0) GO TO 100
C
C5**  READ MOMENTUM ADVECTION AND DIFFUSION SWITCHES AND MISC
C     SWITCHES
C
      NCARD=5
      DO NSKIP=1,29
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISCDMA,ISHDMF,ISDISP,ISWASP,ISDRY,
     *                 ISQQ,ISRLID,ISVEG,ISVEGL,ISITB,ISEVER
      WRITE(7,1002)NCARD
      WRITE(7,*) ISCDMA,ISHDMF,ISDISP,ISWASP,ISDRY,
     *                 ISQQ,ISRLID,ISVEG,ISVEGL,ISITB,ISEVER
      IF(ISO.GT.0) GO TO 100
      IF(ISRLID.EQ.1) ISDRY=-1
      IF(ISDRY.GE.1) IRVEC=2
      IF(ISWASP.EQ.10)ISRCA=1
      JSWAVE=0
      IS1DCHAN=0
      IF(ISCDMA.EQ.10) IS1DCHAN=1
C
C6**  READ DISSOLOVED AND SUSPENDED CONSTITUTENT TRANSPORT SWITCHES
C
      NCARD=6
      DO NSKIP=1,22
      READ(1,1)
      END DO
      DO N=0,8
      READ(1,*,IOSTAT=ISO) ISTRAN(N),ISTOPT(N),ISCDCA(N),ISADAC(N),
     $          ISFCT(N),ISPLIT(N),ISADAH(N),ISADAV(N),ISCI(N),ISCO(N)
      WRITE(7,1002)NCARD
      WRITE(7,*) ISTRAN(N),ISTOPT(N),ISCDCA(N),ISADAC(N),
     $          ISFCT(N),ISPLIT(N),ISADAH(N),ISADAV(N),ISCI(N),ISCO(N)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C7**  READ TIME-RELATED INTEGER PARAMETERS
C
      NCARD=7
      DO NSKIP=1,19
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) NTC,NTSPTC,NLTC,NTTC,NTCPP,NTSTBC,NTCNB,
     $          NTCVB,NTSMMT,NFLTMT,NDRYSTP
      WRITE(7,1002)NCARD
      WRITE(7,*) NTC,NTSPTC,NLTC,NTTC,NTCPP,NTSTBC,NTCNB,
     $          NTCVB,NTSMMT,NFLTMT,NDRYSTP
      IF(ISO.GT.0) GO TO 100
C
C8**  READ TIME-RELATED REAL PARAMETERS
C
      NCARD=8
      DO NSKIP=1,14
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) TCON,TBEGIN,TIDALP,CF,ISCORV,ISDCCA,
     $                     ISCFL,ISCFLM
      WRITE(7,1002)NCARD
      WRITE(7,*) TCON,TBEGIN,TIDALP,CF,ISCORV,ISDCCA,
     $                     ISCFL,ISCFLM
      IF(ISO.GT.0) GO TO 100
C
C9**  READ SPACE RELATED AND SMOOTHING PARAMETERS
C
      NCARD=9
      DO NSKIP=1,28
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) KC,IC,JC,LC,LVC,ISCLO,NDM,LDM,ISMASK,
     $                ISPGNS,NSHMAX,NSBMAX,WSMH,WSMB
      WRITE(7,1002)NCARD
      WRITE(7,*) KC,IC,JC,LC,LVC,ISCLO,NDM,LDM,ISMASK,
     $                ISPGNS,NSHMAX,NSBMAX,WSMH,WSMB
      IF(ISO.GT.0) GO TO 100
c
      if(IC9.gt.0) then   ! Ji for grid.inp, 9/10/99
      IC=IC9
      JC=JC9
      LC=LDM9+2
      LVC=LDM9
      LDM=LDM9
      endif
c check for SWAN
      if(ISWAN.GT.0.and.LVC.NE.LSWAN) then
      write(6,*) "hsdir.inp error: LVC,LSWAN=",LVC,LSWAN
      stop
      endif
C
C
C **  DOMAIN DECOMPOSITION CHECKS FOR HORIZONTAL LOOPS
C
      LCM2T=LC-2
      IF(NDM.EQ.1) LDM=LCM2T
      IF(NDM.GE.2) NCHECK=NDM*LDM
      IF(NDM.GE.2) THEN
        IF(NCHECK.NE.LCM2T) THEN
          WRITE(6,6774)
          STOP
        END IF
      END IF
C
 6774 FORMAT(' INCONSISTENT DOMAIN DECOMPOSITION NDM,LDW ON CARD 9')
C
C **  END DOMAIN DECOMPOSITION CHECKS FOR HORIZONTAL LOOPS
C
      IF (KC.GE.2.AND.ISVEG.EQ.0) ISITB=0
C
C10*  READ LAYER THICKNESS IN VERTICAL
C
      NCARD=10
      DO NSKIP=1,7
      READ(1,1)
      END DO
      DO K=1,KC
        READ(1,*,IOSTAT=ISO)KDUM,DZC(K)
        WRITE(7,1002)NCARD
        WRITE(7,*)KDUM,DZC(K)
        IF(ISO.GT.0) GO TO 100
      END DO
C
C11*  READ GRID, ROUGHNESS, MASKING AND DEPTH PARAMETERS
C
      NCARD=11
      DO NSKIP=1,18
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) DX,DY,DXYCVT,IMDXDY,ZBRADJ,ZBRCVRT,HMIN,
     $                  HADJ,HCVRT,HDRY,HWET,BELADJ,BELCVRT
      WRITE(7,1002)NCARD
      WRITE(7,*) DX,DY,DXYCVT,IMDXDY,ZBRADJ,ZBRCVRT,HMIN,
     $                  HADJ,HCVRT,HDRY,HWET,BELADJ,BELCVRT
      IF(ISO.GT.0) GO TO 100
C     READ(1,*,IOSTAT=ISO) DX,DY,DXYCVT,ZBRADJ,ZBRCVRT,HMIN,HADJ,HCVRT,
C    $                  HDRY,HWET,BELADJ,BELCVRT,RMWET
C
C12*  READ TURBULENT DIFFUSION PARAMETERS
C
      NCARD=12
      DO NSKIP=1,17
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) AHO,AHD,AVO,ABO,AVMN,ABMN,AVCON,ISAVBMN,
     $  ISFAVB,ISINWV
        WRITE(7,1002)NCARD
        WRITE(7,*) AHO,AHD,AVO,ABO,AVMN,ABMN,AVCON,ISAVBMN,
     $  ISFAVB,ISINWV
C
C13*  READ TURBULENCE CLOSURE PARAMETERS
C
      NCARD=13
      DO NSKIP=1,14
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) VKC,CTURB,CTURB2B,CTE1,CTE2,CTE3,QQMIN,
     $                      QQLMIN,DMLMIN
      WRITE(7,1002)NCARD
      WRITE(7,*) VKC,CTURB,CTURB2B,CTE1,CTE2,CTE3,QQMIN,
     $                      QQLMIN,DMLMIN
      IF(ISO.GT.0) GO TO 100
C
C14*  READ TIDAL & ATMOSPHERIC FORCING, GROUND WATER
C     AND SUBGRID CHANNEL PARAMETERS
C
      NCARD=14
      DO NSKIP=1,12
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) MTIDE,NWSER,NASER,ISGWIT,ISCHANT,ISWAVE
      WRITE(7,1002)NCARD
      WRITE(7,*) MTIDE,NWSER,NASER,ISGWIT,ISCHANT,ISWAVE
      ISWCBL=0
      ISWVSD=0
c      IF(ISWAVE.GT.0) ISWCBL=1
      IF(ISO.GT.0) GO TO 100
C
C15*  READ PERIODIC FORCING (TIDAL) CONSTITUENT SYMBOLS AND PERIODS
C
      NCARD=15
      DO NSKIP=1,7
      READ(1,1)
      END DO
      DO M=1,MTIDE
      READ(1,*,IOSTAT=ISO) SYMBOL(M),TCP(M)
      WRITE(7,1002)NCARD
      WRITE(7,*) SYMBOL(M),TCP(M)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C16*  READ SURFACE ELEVATION OR PRESSURE BOUNDARY CONDITION PARAMETERS
C
      NCARD=16
      DO NSKIP=1,16
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) NPBS,NPBW,NPBE,NPBN,NPFOR,NPSER,PDGINIT
      WRITE(7,1002)NCARD
      WRITE(7,*) NPBS,NPBW,NPBE,NPBN,NPFOR,NPSER,PDGINIT
      IF(ISO.GT.0) GO TO 100
C
C17*  READ PERIODIC FORCING (TIDAL) SURFACE ELEVATION OR
C     PRESSURE BOUNDARY CONDITION FORCINGS
C
      NCARD=17
      DO NSKIP=1,9
      READ(1,1)
      END DO
      DO NP=1,NPFOR
      DO M=1,MTIDE
      READ(1,*,IOSTAT=ISO)NDUM,CDUM,PFAM(NP,M),PFPH(NP,M)
      WRITE(7,1002)NCARD
      WRITE(7,*)NDUM,CDUM,PFAM(NP,M),PFPH(NP,M)
      IF(ISO.GT.0) GO TO 100
      END DO
      END DO
C
C18*  READ PERIODIC FORCING (TIDAL) ELEVATION BOUNDARY CONDTIONS
C     ON SOUTH OPEN BOUNDARIES
C
      NCARD=18
      DO NSKIP=1,11
      READ(1,1)
      END DO
      DO L=1,NPBS
      READ(1,*,IOSTAT=ISO) IPBS(L),JPBS(L),ISPBS(L),NPFORS,NPSERS(L)
      WRITE(7,1002)NCARD
      WRITE(7,*) IPBS(L),JPBS(L),ISPBS(L),NPFORS,NPSERS(L)
      IF(ISO.GT.0) GO TO 100
      DO M=1,MTIDE
      RAD=PI2*PFPH(NPFORS,M)/TCP(M)
      AMP=G*PFAM(NPFORS,M)
      PCBS(L,M)=AMP*COS(RAD)
      PSBS(L,M)=AMP*SIN(RAD)
      END DO
      END DO
C
C19*  READ PERIODIC FORCING (TIDAL) ELEVATION BOUNDARY CONDTIONS
C     ON WEST OPEN BOUNDARIES
C
      NCARD=19
      DO NSKIP=1,10
      READ(1,1)
      END DO
      DO L=1,NPBW
      READ(1,*,IOSTAT=ISO) IPBW(L),JPBW(L),ISPBW(L),NPFORW,NPSERW(L)
      WRITE(7,1002)NCARD
      WRITE(7,*) IPBW(L),JPBW(L),ISPBW(L),NPFORW,NPSERW(L)
      IF(ISO.GT.0) GO TO 100
      DO M=1,MTIDE
      RAD=PI2*PFPH(NPFORW,M)/TCP(M)
      AMP=G*PFAM(NPFORW,M)
      PCBW(L,M)=AMP*COS(RAD)
      PSBW(L,M)=AMP*SIN(RAD)
      END DO
      END DO
C
C20*  READ PERIODIC FORCING (TIDAL)ELEVATION BOUNDARY CONDTIONS
C     ON EAST OPEN BOUNDARIES
C
      NCARD=20
      DO NSKIP=1,10
      READ(1,1)
      END DO
      DO L=1,NPBE
      READ(1,*,IOSTAT=ISO) IPBE(L),JPBE(L),ISPBE(L),NPFORE,NPSERE(L)
      WRITE(7,1002)NCARD
      WRITE(7,*) IPBE(L),JPBE(L),ISPBE(L),NPFORE,NPSERE(L)
      IF(ISO.GT.0) GO TO 100
      if(NPFORE.GT.0) THEN
      DO M=1,MTIDE
      RAD=PI2*PFPH(NPFORE,M)/TCP(M)
      AMP=G*PFAM(NPFORE,M)
      PCBE(L,M)=AMP*COS(RAD)
      PSBE(L,M)=AMP*SIN(RAD)
      END DO
      ELSE
      DO M=1,MTIDE
      PCBE(L,M)=0
      PSBE(L,M)=0  
      ENDDO    
      ENDIF
      END DO
C
C21*  READ PERIODIC FORCING (TIDAL) ELEVATION BOUNDARY CONDTIONS
C     ON NORTH OPEN BOUNDARIES
C
      NCARD=21
      DO NSKIP=1,10
      READ(1,1)
      END DO
      DO L=1,NPBN
      READ(1,*,IOSTAT=ISO) IPBN(L),JPBN(L),ISPBN(L),NPFORN,NPSERN(L)
      WRITE(7,1002)NCARD
      WRITE(7,*) IPBN(L),JPBN(L),ISPBN(L),NPFORN,NPSERN(L)
      IF(ISO.GT.0) GO TO 100
      IF(NPFORN.GT.0) THEN
      DO M=1,MTIDE
       RAD=PI2*PFPH(NPFORN,M)/TCP(M)
      AMP=G*PFAM(NPFORN,M)
      PCBN(L,M)=AMP*COS(RAD)
      PSBN(L,M)=AMP*SIN(RAD)
      END DO
      ENDIF
      END DO
C
C22*  READ NUM OF SEDIMENT AMD TOXICS AND NUM OF CONCENTRATION TIME SERIES
C
      NCARD=22
      DO NSKIP=1,19
      READ(1,1)
      END DO
C                                          SAL      TEM      DYE
      READ(1,*,IOSTAT=ISO) NTOX,NSED,NSND,NCSER(1),NCSER(2),NCSER(3),
     $           NCSER(4),NTOXSER,NSEDSER,NSNDSER,ISSBAL,NPCB,NTPCB
      WRITE(7,1002)NCARD
      WRITE(7,*) NTOX,NSED,NSND,NCSER(1),NCSER(2),NCSER(3),
     $           NCSER(4),NTOXSER,NSEDSER,NSNDSER,ISSBAL
      IF(ISO.GT.0) GO TO 100
      MTMP=4
      NTOX1=NTOX
      IF(NPCB.GT.0)NTOX1=NPCB
      DO N=1,NTOX1
       MTMP=MTMP+1
       MSVTOX(N)=MTMP
      END DO
      DO N=1,NSED
       MTMP=MTMP+1
       MSVSED(N)=MTMP
      END DO
      DO N=1,NSND
       MTMP=MTMP+1
       MSVSND(N)=MTMP
      END DO
      DO N=1,NTOX1
       M=MSVTOX(N)
       NCSER(M)=NTOXSER
      END DO
      DO N=1,NSED
       M=MSVSED(N)
       NCSER(M)=NSEDSER
      END DO
      DO N=1,NSND
       M=MSVSND(N)
       NCSER(M)=NSNDSER
      END DO
C
C23*  READ VELOCITY, VOL SOUR/SINK, FLOW CONTROL, & WITHDRAW/RETURN DATA
C
      NCARD=23
      DO NSKIP=1,21
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) NVBS,NUBW,NUBE,NVBN,NQSIJ,NQJPIJ,NQSER,NQCTL,
     $                  NQCTLT,NQWR,NQWRSR,ISDIQ
      WRITE(7,1002)NCARD
      WRITE(7,*) NVBS,NUBW,NUBE,NVBN,NQSIJ,NQJPIJ,NQSER,NQCTL,
     $                  NQCTLT,NQWR,NQWRSR,ISDIQ
      IF(ISO.GT.0) GO TO 100
C
C24*  READ VOLUMN SOURCE/SINK LOCATIONS, MAGNITUDES, & VOL & CONC SERIES
C
      NCARD=24
      DO NSKIP=1,26
      READ(1,1)
      END DO
      DO L=1,NQSIJ
       READ(1,*,IOSTAT=ISO)IQS(L),JQS(L),QSSE,NQSMUL(L),NQSMF(L),
     $          NQSERQ(L),NCSERQ(L,1),NCSERQ(L,2),NCSERQ(L,3),
     $          NCSERQ(L,4),NTOXSRQ,NSEDSRQ,NSNDSRQ
       WRITE(7,1002)NCARD
       WRITE(7,*)IQS(L),JQS(L),QSSE,NQSMUL(L),NQSMF(L),
     $          NQSERQ(L),NCSERQ(L,1),NCSERQ(L,2),NCSERQ(L,3),
     $          NCSERQ(L,4),NTOXSRQ,NSEDSRQ,NSNDSRQ
       IF(ISO.GT.0) GO TO 100
       DO K=1,KC
       QSS(K,L)=QSSE*DZC(K)
       END DO
       DO N=1,NTOX1
        M=MSVTOX(N)
        NCSERQ(L,M)=NTOXSRQ
       END DO
       DO N=1,NSED
        M=MSVSED(N)
        NCSERQ(L,M)=NSEDSRQ
       END DO
       DO N=1,NSND
        M=MSVSND(N)
        NCSERQ(L,M)=NSNDSRQ
       END DO
      END DO
C
C25*  READ TIME CONSTANT VOLUMETRIC SOURCE INFLOW CONCENTRATIONS
C     SAL,TEM,DYE,SFL,TOX(1 TO NOTX)
C
      NCARD=25
      DO NSKIP=1,12
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NQSIJ
      READ(1,*,IOSTAT=ISO) (CQSE(M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CQSE(M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
       DO MS=1,MMAX
        DO K=1,KC
        CQS(K,L,MS)=CQSE(MS)
        END DO
       END DO
      END DO
C
C26*  READ TIME CONSTANT VOLUMETRIC SOURCE INFLOW CONCENTRATIONS
C     SED(1 TO NSED),SND(1 TO NSND)
C
      NCARD=26
      DO NSKIP=1,13
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NQSIJ
      READ(1,*,IOSTAT=ISO) (CQSE(M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CQSE(M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
       DO MS=MMIN,MMAX
        DO K=1,KC
        CQS(K,L,MS)=CQSE(MS)
        END DO
       END DO
      END DO
C
C27*  READ JET/PLUME SOURCE LOCATIONS AND PARAMETERS
C
      NCARD=27
      DO NSKIP=1,18
      READ(1,1)
      END DO
      DO L=1,NQJPIJ
      READ(1,*,IOSTAT=ISO) IDUM,ICALJP(L),IQJP(L),JQJP(L),KQJP(L),
     $         XJETL(L),YJETL(L),ZJET(L),PHJET(L),THJET(L),DJET(L),
     $                      CFRD(L),DJPER(L)
      WRITE(7,1002)NCARD
      WRITE(7,*) IDUM,ICALJP(L),IQJP(L),JQJP(L),KQJP(L),
     $         XJETL(L),YJETL(L),ZJET(L),PHJET(L),THJET(L),DJET(L),
     $                      CFRD(L),DJPER(L)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C28*  READ JET/PLUME SOURCE LOCATIONS AND PARAMETERS
C
      NCARD=28
      DO NSKIP=1,18
      READ(1,1)
      END DO
      DO L=1,NQJPIJ
      READ(1,*,IOSTAT=ISO) IDUM,NJEL(L),NJPMX(L),ISENT(L),ISTJP(L),
     $   NUDJP(L),IOUTJP(L),NZPRJP(L),ISDJP(L)
      WRITE(7,1002)NCARD
      WRITE(7,*) IDUM,NJEL(L),NJPMX(L),ISENT(L),ISTJP(L),
     $   NUDJP(L),IOUTJP(L),NZPRJP(L),ISDJP(L)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C29*  READ ADDITIONAL JET/PLUME PARAMETERS
C
      NCARD=29
      DO NSKIP=1,15
      READ(1,1)
      END DO
      DO L=1,NQJPIJ
       READ(1,*,IOSTAT=ISO) IDUM,QQCJP(L),
     $   NQSERJP(L),NCSERJP(L,1),NCSERJP(L,2),NCSERJP(L,3),
     $   NCSERJP(L,4),NTXSRJP,NSDSRJP,NSNSRJP
       WRITE(7,1002)NCARD
       WRITE(7,*) IDUM,QQCJP(L),
     $   NQSERJP(L),NCSERJP(L,1),NCSERJP(L,2),NCSERJP(L,3),
     $   NCSERJP(L,4),NTXSRJP,NSDSRJP,NSNSRJP
       NUDJPC(L)=1
       IF(ISO.GT.0) GO TO 100
       DO N=1,NTOX1
        M=MSVTOX(N)
        NCSERJP(L,M)=NTXSRJP
       END DO
       DO N=1,NSED
        M=MSVSED(N)
        NCSERJP(L,M)=NSDSRJP
       END DO
       DO N=1,NSND
        M=MSVSND(N)
        NCSERJP(L,M)=NSNSRJP
       END DO
      END DO
      IF(NQJPIJ.GT.1) THEN
        DO L=2,NQJPIJ
         NUDJP(L)=NUDJP(1)
        END DO
       END IF
C
C30*  READ TIME CONSTANT INFLOW CONCENTRATIONS FOR TIME CONSTANT
C     JET/PLUME SOURCES SAL,TEM,DYE,SFL,TOX(1 TO NOTX)
C
      NCARD=30
      DO NSKIP=1,12
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NQJPIJ
      READ(1,*,IOSTAT=ISO) (CQSE(M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CQSE(M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
       DO MS=1,MMAX
        DO K=1,KC
        CQCJP(K,L,MS)=CQSE(MS)
        END DO
       END DO
      END DO
C
C31*  READ TIME CONSTANT INFLOW CONCENTRATIONS FOR TIME CONSTANT
C     JET/PLUME SOURCES SED(1 TO NSED),SND(1 TO NSND)
C
      NCARD=31
      DO NSKIP=1,13
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NQJPIJ
      READ(1,*,IOSTAT=ISO) (CQSE(M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CQSE(M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
       DO MS=MMIN,MMAX
        DO K=1,KC
        CQCJP(K,L,MS)=CQSE(MS)
        END DO
       END DO
      END DO
C
C32*  READ SURF ELEV OR PRESS DEPENDENT FLOW CONTROL STRUCTURE INFO
C
      NCARD=32
      DO NSKIP=1,31
      READ(1,1)
      END DO
      DO L=1,NQCTL
      READ(1,*,IOSTAT=ISO)IQCTLU(L),JQCTLU(L),IQCTLD(L),JQCTLD(L),
     $                   NQCTYP(L),NQCTLQ(L),NQCMUL(L),NQCMFU(L),
     $                   NQCMFD(L),BQCMFU(L),BQCMFD(L)
      WRITE(7,1002)NCARD
      WRITE(7,*)IQCTLU(L),JQCTLU(L),IQCTLD(L),JQCTLD(L),
     $                   NQCTYP(L),NQCTLQ(L),NQCMUL(L),NQCMFU(L),
     $                   NQCMFD(L),BQCMFU(L),BQCMFD(L)
c     $                   NQCMFD(L),IQCAX(L),JQCAX(L)
      IF(ISO.GT.0) GO TO 100
       DO K=1,KC
         QCTLTO(K,L)=0.
         QCTLT(K,L)=0.
       END DO
      END DO
C
C33*  READ FLOW WITHDRAWAL, HEAT OR MATERIAL ADDITION, FLOW RETURN DATA
C
      NCARD=32
      DO NSKIP=1,26
      READ(1,1)
      END DO
      DO L=1,NQWR
      READ(1,*,IOSTAT=ISO)IQWRU(L),JQWRU(L),KQWRU(L),
     $                     IQWRD(L),JQWRD(L),KQWRD(L),QWR(L),
     $     NQWRSERQ(L),NQWRMFU(L),NQWRMFD(L),BQWRMFU(L),BQWRMFD(L)
      WRITE(7,1002)NCARD
      WRITE(7,*)IQWRU(L),JQWRU(L),KQWRU(L),
     $                     IQWRD(L),JQWRD(L),KQWRD(L),QWR(L),
     $     NQWRSERQ(L),NQWRMFU(L),NQWRMFD(L),BQWRMFU(L),BQWRMFD(L)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C34*  READ TIME CONSTANT WITHDRAWAL,ADD,RETURN, CONCENTRATION INCREASES
C     SAL,TEM,DYE,SFL,TOX(1 TO NTOX)
C
      NCARD=34
      DO NSKIP=1,10
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NQWR
      READ(1,*,IOSTAT=ISO) (CQWR(L,MS),MS=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CQWR(L,MS),MS=1,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C35*  READ TIME CONSTANT WITHDRAWAL,ADD,RETURN, CONCENTRATION INCREASES
C     SED(1 TO NSED),SND(1 TO NSND)
C
      NCARD=35
      DO NSKIP=1,7
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NQWR
      READ(1,*,IOSTAT=ISO) (CQWR(L,MS),MS=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CQWR(L,MS),MS=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C36*  SEDIMENT INITIALIZATION AND WATER COLUMN/BED REPRESENTATION OPTIONS
C
      NCARD=36
      DO NSKIP=1,41
      READ(1,1)
      END DO
      IF(NSED.GT.0.OR.NSND.GT.0) THEN
      READ(1,*,IOSTAT=ISO)ISEDINT,ISEDBINT,ISEDWC,ISMUD,ISNDWC,ISEDVW,
     $                     ISNDVW,KB,ISEDAL,ISNDAL
      WRITE(7,1002)NCARD
      WRITE(7,*)ISEDINT,ISEDBINT,ISEDWC,ISMUD,ISNDWC,ISEDVW,
     $                     ISNDVW,KB,ISEDAL,ISNDAL
      IF(ISO.GT.0) GO TO 100
      END IF
C
C37*  BED MECHANICAL PROPERTIES PARAMETER SET 1
C
      NCARD=37
      DO NSKIP=1,26
      READ(1,1)
      END DO
c     IF(NSED.GT.0.OR.NSND.GT.O) THEN !bug, Ji, 3/5/00
      IF(NSED.GT.0.OR.NSND.GT.0) THEN
      READ(1,*,IOSTAT=ISO)IBMECH,IMORPH,HBEDMAX,BEDPORC,SEDMDMX,
     $                      SEDMDMN,SEDVDRD,SEDVDRM,SEDVRDT
      WRITE(7,1002)NCARD
      WRITE(7,*)IBMECH,IMORPH,HBEDMAX,BEDPORC,SEDMDMX,
     $                      SEDMDMN,SEDVDRD,SEDVDRM,SEDVRDT
      IF(ISO.GT.0) GO TO 100
      IF(IBMECH.GE.1) ISEDBINT=1
      END IF
      SNDVDRD=BEDPORC/(1.-BEDPORC)
C
C38*  BED MECHANICAL PROPERTIES PARAMETER SET 2
C
      NCARD=38
      DO NSKIP=1,12
      READ(1,1)
      END DO
c     IF(NSED.GT.0.OR.NSND.GT.O) THEN  ! Bug, Ji, 3/5/00
      IF(NSED.GT.0.OR.NSND.GT.0) THEN
      READ(1,*,IOSTAT=ISO)SHSBEDMX,BMECH1,BMECH2,BMECH3,BMECH4,BMECH5
      WRITE(7,1002)NCARD
      WRITE(7,*)SHSBEDMX,BMECH1,BMECH2,BMECH3,BMECH4,BMECH5
      IF(ISO.GT.0) GO TO 100
      END IF
C
C39*  READ COHESIVE SEDIMENT PARAMETER SET 1 REPEAT DATA LINE NSED TIMES
C
      NCARD=39
      DO NSKIP=1,20
      READ(1,1)
      END DO
      IF(NSED.GT.0) THEN
      DO N=1,NSED
       READ(1,*,IOSTAT=ISO)SEDO(N),SEDBO(N),SDEN(N),SSG(N),
     $                  WSEDO(N),SEDN(N),SEXP(N),TAUD(N),ISEDSCOR(N)
       WRITE(7,1002)NCARD
      WRITE(7,*)SEDO(N),SEDBO(N),SDEN(N),SSG(N),
     $                  WSEDO(N),SEDN(N),SEXP(N),TAUD(N)
       IF(ISO.GT.0) GO TO 100
       SEDDIA(N)=0.
      END DO
      END IF
C
C40*  READ COHESIVE SEDIMENT PARAMETER SET 2 REPEAT DATA LINE NSED TIMES
C
      NCARD=40
      DO NSKIP=1,17
      READ(1,1)
      END DO
      IF(NSED.GT.0) THEN
      DO N=1,NSED
       READ(1,*,IOSTAT=ISO)IWRSP(N),WRSPO(N),TAUR(N),TAUN(N),TEXP(N)
       WRITE(7,1002)NCARD
       WRITE(7,*)IWRSP(N),WRSPO(N),TAUR(N),TAUN(N),TEXP(N)
       IF(ISO.GT.0) GO TO 100
       ISNDEQ(N)=0
      END DO
      END IF
C
C41*  READ NONCOHESIVE SEDIMENT PARAMETER SET 1 REPEAT DATA LINE NSND TIMES
C
      NCARD=41
      DO NSKIP=1,19
      READ(1,1)
      END DO
      IF(NSND.GT.0) THEN
      DO NX=1,NSND
       N=NX+NSED
       READ(1,*,IOSTAT=ISO)SEDO(N),SEDBO(N),SDEN(N),SSG(N),SEDDIA(N),
     $                  WSEDO(N),SEDN(N),SEXP(N),TAUD(N),ISEDSCOR(N)
       WRITE(7,1002)NCARD
      WRITE(7,*)SEDO(N),SEDBO(N),SDEN(N),SSG(N),SEDDIA(N),
     $                  WSEDO(N),SEDN(N),SEXP(N),TAUD(N)
       IF(ISO.GT.0) GO TO 100
      END DO
      END IF
C
C42*  READ NONCOHESIVE SEDIMENT PARAMETER SET 2 REPEAT DATA LINE NSND TIMES
C
      NCARD=42
      DO NSKIP=1,16
      READ(1,1)
      END DO
      IF(NSND.GT.0) THEN
      DO NX=1,NSND
       N=NX+NSED
       READ(1,*,IOSTAT=ISO)ISNDEQ(N),TAUR(N),TAUN(N),TEXP(N)
       WRITE(7,1002)NCARD
       WRITE(7,*)ISNDEQ(N),TAUR(N),TAUN(N),TEXP(N)
       IF(ISO.GT.0) GO TO 100
       IWRSP(N)=0
       WRSPO(N)=0
      END DO
      END IF
C
C43*  READ TOXIC CONTAMINANT INITIAL CONDITIONS AND PARAMETERS
C
      NCARD=43

      DO NSKIP=1,23
      READ(1,1)
      END DO

      DO NT=1,NTOX1
        READ(1,*,IOSTAT=ISO)NDUM,ITXINT(NT),ITXBDUT(NT),TOXINTW(NT),
     $      TOXINTB(NT),RKTOXW(NT),TKTOXW(NT),RKTOXB(NT),TRTOXB(NT)
        WRITE(7,1002)NCARD
      WRITE(7,*)NDUM,ITXINT(NT),ITXBDUT(NT),TOXINTW(NT),
     $      TOXINTB(NT),RKTOXW(NT),TKTOXW(NT),RKTOXB(NT),TRTOXB(NT)
        IF(ISO.GT.0) GO TO 100
      END DO
C
C44*  READ TOXIC CONTAMINANT PARAMETERS
C
      NCARD=44
      DO NSKIP=1,20
      READ(1,1)
      END DO
      
      DO NT=1,NTOX1
        READ(1,*,IOSTAT=ISO)NDUM,VOLTOX(NT),RMOLTX(NT),
     $   DIFTOX(NT),DIFTOXB(NT),AirDiff,TOXA0,
     $  HENC(NT),RGASA(NT),Atmdep
        RKTOXP(NT)=0 
        SKTOXP(NT)=0
        Atmdep=Atmdep*1.0e-3/86400.0  ! change to ug/m^2/second
        WRITE(7,1002)NCARD
      WRITE(7,*)NDUM,VOLTOX(NT),RMOLTX(NT),RKTOXP(NT),
     $                       SKTOXP(NT),DIFTOX(NT)
        IF(ISO.GT.0) GO TO 100
      END DO
       
        ADEP=0 
               
C
C45*  READ TOXIC CONTAMINANT-SEDIMENT INTERACTION PARAMETERS
C
      NCARD=45
      call SkipComm(1, 'C')
	
	IF(NPCB.EQ.0) THEN

      IF(NTOX.GT.0) THEN
      DO NT=1,NTOX
       IF(NSED.GT.0) THEN
         DO N=1,NSED
         READ(1,*,IOSTAT=ISO)NDUM1,NDUM2,
     $         ITXPARW(N,NT),TOXPARW(N,NT),CONPARW(N,NT),
     $         ITXPARB(N,NT),TOXPARB(N,NT),CONPARB(N,NT)

         WRITE(7,1002)NCARD
         WRITE(7,*)NDUM1,NDUM2,
     $         ITXPARW(N,NT),TOXPARW(N,NT),CONPARW(N,NT),
     $         ITXPARB(N,NT),TOXPARB(N,NT),CONPARB(N,NT)
         IF(ISO.GT.0) GO TO 100
         END DO
       END IF
       IF(NSND.GT.0) THEN
         DO NX=1,NSND
         N=NX+NSED
         READ(1,*,IOSTAT=ISO)NDUM1,NDUM2,
     $         ITXPARW(N,NT),TOXPARW(N,NT),CONPARW(N,NT),
     $         ITXPARB(N,NT),TOXPARB(N,NT),CONPARB(N,NT)
         WRITE(7,1002)NCARD
         WRITE(7,*)NDUM1,NDUM2,
     $         ITXPARW(N,NT),TOXPARW(N,NT),CONPARW(N,NT),
     $         ITXPARB(N,NT),TOXPARB(N,NT),CONPARB(N,NT)
         IF(ISO.GT.0) GO TO 100
         END DO
       END IF
      END DO
      END IF

	ELSE           ! read PCB parameters

      DO NT=1,NPCB
         DO N=1,3
         READ(1,*,IOSTAT=ISO)NDUM1,NDUM2,
     $   ITXPARW(N,NT),TOXPARW(N,NT),CONPARW(N,NT),
     $   ITXPARB(N,NT),TOXPARB(N,NT),CONPARB(N,NT)

!	    TOXPARW(N,NT)=6.17E-7*10**TOXPARW(N,NT)      ! Chapra  1997  Conver Kw to partition coeff.
!         TOXPARB(N,NT)=6.17E-7*10**TOXPARB(N,NT)
          TOXPARW(N,NT)=10**TOXPARW(N,NT)*1.0e-6
          TOXPARB(N,NT)=10**TOXPARB(N,NT)*1.0e-6
          write(*,*)'Koc w sed ',TOXPARW(N,NT),TOXPARB(N,NT),N,NT
          
         WRITE(7,1002)NCARD
         WRITE(7,*)NDUM1,NDUM2,
     $         ITXPARW(N,NT),TOXPARW(N,NT),CONPARW(N,NT),
     $         ITXPARB(N,NT),TOXPARB(N,NT),CONPARB(N,NT)
         IF(ISO.GT.0) GO TO 100
         END DO
 
      END DO
      END IF
      if(NPCB.GT.0) then
C45a
      NCARD=45
      CALL  SkipComm(1, 'C')
      Read(1,*)KBP,BPRO1,BPRO2,RPOC2IS,RESPOC,RESBS1,RESBS2,
     &         SETT_S1,SETT_S2,F_SET,F_Load 
     
       KB=KBP
! 
!    convert to second
!

c45b
      NCARD=45
      CALL  SkipComm(1, 'C')
      Read(1,*) HTOP,HBOT,T_cr,iBSEDOP ,A_BC, A_K,iMDTau,Tauexp,
     &        RDSED 
	RESPOC= RESPOC/86400.0
	RESBS1= RESBS1/86400.0
	RESBS2= RESBS2/86400.0
	SETT_S1= SETT_S1/365.0/86400.0
	SETT_S2= SETT_S2/365.0/86400.0

      endif	
C
C46*  READ BUOYANCY, TEMPERATURE, DYE DATA AND CONCENTRATION BC DATA
C
      NCARD=46
      DO NSKIP=1,17
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO)BSC,TEMO,HEQT,RKDYE,NCBS,NCBW,NCBE,NCBN
      WRITE(7,1002)NCARD
      WRITE(7,*)BSC,TEMO,HEQT,RKDYE,NCBS,NCBW,NCBE,NCBN
      IF(ISO.GT.0) GO TO 100
      IF(BSC.EQ.2) THEN
        BSC=1.
        IBSC=1
       ELSE
        IBSC=0
      END IF
C
C47*  READ LOCATIONS OF CONC BC'S ON SOUTH BOUNDARIES
C
      NCARD=47
      DO NSKIP=1,16
      READ(1,1)
      END DO
      DO L=1,NCBS
       READ(1,*,IOSTAT=ISO) ICBS(L),JCBS(L),NTSCRS(L),
     $   NCSERS(L,1),NCSERS(L,2),NCSERS(L,3),NCSERS(L,4),
     $   NTOXSRC,NSEDSRC,NSNDSRC
       WRITE(7,1002)NCARD
      WRITE(7,*) ICBS(L),JCBS(L),NTSCRS(L),
     $   NCSERS(L,1),NCSERS(L,2),NCSERS(L,3),NCSERS(L,4),
     $   NTOXSRC,NSEDSRC,NSNDSRC
       IF(ISO.GT.0) GO TO 100
       DO N=1,NTOX1
        M=MSVTOX(N)
        NCSERS(L,M)=NTOXSRC
       END DO
       DO N=1,NSED
        M=MSVSED(N)
        NCSERS(L,M)=NSEDSRC
       END DO
       DO N=1,NSND
        M=MSVSND(N)
        NCSERS(L,M)=NSNDSRC
       END DO
      END DO
C
C48*  READ CONSTANT BOTTOM CONCENTRATION ON SOUTH CONC BOUNDARIES
C     SAL,TEM,DYE,SFL,TOX(1 TO NTOX)
C
      NCARD=48
      DO NSKIP=1,11
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NCBS
      READ(1,*,IOSTAT=ISO) (CBS(L,1,M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBS(L,1,M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C49*  READ CONSTANT BOTTOM CONCENTRATION ON SOUTH CONC BOUNDARIES
C     SED(1 TO NSED),SND(1,NSND)
C
      NCARD=49
      DO NSKIP=1,9
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NCBS
      READ(1,*,IOSTAT=ISO) (CBS(L,1,M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBS(L,1,M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C50*  READ CONSTANT SURFACE CONCENTRATION ON SOUTH CONC BOUNDARIES
C     SAL,TEM,DYE,SFL,TOX(1 TO NTOX)
C
      NCARD=50
      DO NSKIP=1,11
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NCBS
      READ(1,*,IOSTAT=ISO) (CBS(L,2,M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBS(L,2,M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C51*  READ CONSTANT SURFACE CONCENTRATION ON SOUTH CONC BOUNDARIES
C     SED(1 TO NSED),SND(1,NSND)
C
      NCARD=51
      DO NSKIP=1,9
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NCBS
      READ(1,*,IOSTAT=ISO) (CBS(L,2,M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBS(L,2,M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C52*  READ LOCATIONS OF CONC BC'S ON WEST BOUNDARIES
C
      NCARD=52
      DO NSKIP=1,16
      READ(1,1)
      END DO
      DO L=1,NCBW
       READ(1,*,IOSTAT=ISO) ICBW(L),JCBW(L),NTSCRW(L),
     $   NCSERW(L,1),NCSERW(L,2),NCSERW(L,3),NCSERW(L,4),
     $   NTOXSRC,NSEDSRC,NSNDSRC
       WRITE(7,1002)NCARD
      WRITE(7,*) ICBW(L),JCBW(L),NTSCRW(L),
     $   NCSERW(L,1),NCSERW(L,2),NCSERW(L,3),NCSERW(L,4),
     $   NTOXSRC,NSEDSRC,NSNDSRC
       IF(ISO.GT.0) GO TO 100
       DO N=1,NTOX1
        M=MSVTOX(N)
        NCSERW(L,M)=NTOXSRC
       END DO
     
       DO N=1,NSED
        M=MSVSED(N)
        NCSERW(L,M)=NSEDSRC
       END DO
       DO N=1,NSND
        M=MSVSND(N)
        NCSERW(L,M)=NSNDSRC
       END DO
      END DO
C
C53*  READ CONSTANT BOTTOM CONCENTRATION ON WEST CONC BOUNDARIES
C     SAL,TEM,DYE,SFL,TOX(1 TO NTOX)
C
      NCARD=53
      DO NSKIP=1,11
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NCBW
      READ(1,*,IOSTAT=ISO) (CBW(L,1,M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBW(L,1,M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C54*  READ CONSTANT BOTTOM CONCENTRATION ON WEST CONC BOUNDARIES
C     SED(1 TO NSED),SND(1,NSND)
C
      NCARD=54
      DO NSKIP=1,9
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NCBW
      READ(1,*,IOSTAT=ISO) (CBW(L,1,M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBW(L,1,M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C55*  READ CONSTANT SURFACE CONCENTRATION ON WEST CONC BOUNDARIES
C     SAL,TEM,DYE,SFL,TOX(1 TO NTOX)
C
      NCARD=55
      DO NSKIP=1,11
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NCBW
      READ(1,*,IOSTAT=ISO) (CBW(L,2,M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBW(L,2,M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C56*  READ CONSTANT SURFACE CONCENTRATION ON WEST CONC BOUNDARIES
C     SED(1 TO NSED),SND(1,NSND)
C
      NCARD=56
      DO NSKIP=1,9
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NCBW
      READ(1,*,IOSTAT=ISO) (CBW(L,2,M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBW(L,2,M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C57*  READ LOCATIONS OF CONC BC'S ON EAST BOUNDARIES
C
      NCARD=57
      DO NSKIP=1,16
      READ(1,1)
      END DO
      DO L=1,NCBE
       READ(1,*,IOSTAT=ISO) ICBE(L),JCBE(L),NTSCRE(L),
     $   NCSERE(L,1),NCSERE(L,2),NCSERE(L,3),NCSERE(L,4),
     $   NTOXSRC,NSEDSRC,NSNDSRC
       WRITE(7,1002)NCARD
      WRITE(7,*) ICBE(L),JCBE(L),NTSCRE(L),
     $   NCSERE(L,1),NCSERE(L,2),NCSERE(L,3),NCSERE(L,4),
     $   NTOXSRC,NSEDSRC,NSNDSRC
       IF(ISO.GT.0) GO TO 100
       DO N=1,NTOX1
        M=MSVTOX(N)
        NCSERE(L,M)=NTOXSRC
       END DO
       
       DO N=1,NSED
        M=MSVSED(N)
        NCSERE(L,M)=NSEDSRC
       END DO
       DO N=1,NSND
        M=MSVSND(N)
        NCSERE(L,M)=NSNDSRC
       END DO
      END DO
C
C58*  READ CONSTANT BOTTOM CONCENTRATION ON EAST CONC BOUNDARIES
C     SAL,TEM,DYE,SFL,TOX(1 TO NTOX)
C
      NCARD=58
      DO NSKIP=1,11
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NCBE
      READ(1,*,IOSTAT=ISO) (CBE(L,1,M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBE(L,1,M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C59*  READ CONSTANT BOTTOM CONCENTRATION ON EAST CONC BOUNDARIES
C     SED(1 TO NSED),SND(1,NSND)
C
      NCARD=59
      DO NSKIP=1,9
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NCBE
      READ(1,*,IOSTAT=ISO) (CBE(L,1,M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBE(L,1,M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C60*  READ CONSTANT SURFACE CONCENTRATION ON EAST CONC BOUNDARIES
C     SAL,TEM,DYE,SFL,TOX(1 TO NTOX)
C
      NCARD=60
      DO NSKIP=1,11
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NCBE
      READ(1,*,IOSTAT=ISO) (CBE(L,2,M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBE(L,2,M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C61*  READ CONSTANT SURFACE CONCENTRATION ON EAST CONC BOUNDARIES
C     SED(1 TO NSED),SND(1,NSND)
C
      NCARD=61
      DO NSKIP=1,9
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NCBE
      READ(1,*,IOSTAT=ISO) (CBE(L,2,M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBE(L,2,M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C62*  READ LOCATIONS OF CONC BC'S ON NORTH BOUNDARIES
C
      NCARD=62
      DO NSKIP=1,16
      READ(1,1)
      END DO
      DO L=1,NCBN
       READ(1,*,IOSTAT=ISO) ICBN(L),JCBN(L),NTSCRN(L),
     $   NCSERN(L,1),NCSERN(L,2),NCSERN(L,3),NCSERN(L,4),
     $   NTOXSRC,NSEDSRC,NSNDSRC
       WRITE(7,1002)NCARD
      WRITE(7,*) ICBN(L),JCBN(L),NTSCRN(L),
     $   NCSERN(L,1),NCSERN(L,2),NCSERN(L,3),NCSERN(L,4),
     $   NTOXSRC,NSEDSRC,NSNDSRC
       IF(ISO.GT.0) GO TO 100
       DO N=1,NTOX1
        M=MSVTOX(N)
        NCSERN(L,M)=NTOXSRC
       END DO
      
       DO N=1,NSED
        M=MSVSED(N)
        NCSERN(L,M)=NSEDSRC
       END DO
       DO N=1,NSND
        M=MSVSND(N)
        NCSERN(L,M)=NSNDSRC
       END DO
      END DO
C
C63*  READ CONSTANT BOTTOM CONCENTRATION ON NORTH CONC BOUNDARIES
C     SAL,TEM,DYE,SFL,TOX(1 TO NTOX)
C
      NCARD=63
      DO NSKIP=1,11
      READ(1,1)
      END DO
      MMAX=4+NTOX1
      DO L=1,NCBN
      READ(1,*,IOSTAT=ISO) (CBN(L,1,M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBN(L,1,M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C64*  READ CONSTANT BOTTOM CONCENTRATION ON NORTH CONC BOUNDARIES
C     SED(1 TO NSED),SND(1,NSND)
C
      NCARD=64
      DO NSKIP=1,9
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NCBN
      READ(1,*,IOSTAT=ISO) (CBN(L,1,M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBN(L,1,M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C65*  READ CONSTANT SURFACE CONCENTRATION ON NORTH CONC BOUNDARIES
C     SAL,TEM,DYE,SFL,TOX(1 TO NTOX)
C
      NCARD=65
      DO NSKIP=1,11
      READ(1,1)
      END DO
      MMAX=4+NTOX
      DO L=1,NCBN
      READ(1,*,IOSTAT=ISO) (CBN(L,2,M),M=1,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBN(L,2,M),M=1,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C66*  READ CONSTANT SURFACE CONCENTRATION ON NORTH CONC BOUNDARIES
C     SED(1 TO NSED),SND(1,NSND)
C
      NCARD=66
      DO NSKIP=1,9
      READ(1,1)
      END DO
      MMIN=MMAX+1
      MMAX=MMAX+NSED+NSND
      DO L=1,NCBN
      READ(1,*,IOSTAT=ISO) (CBN(L,2,M),M=MMIN,MMAX)
      WRITE(7,1002)NCARD
      WRITE(7,*) (CBN(L,2,M),M=MMIN,MMAX)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C66A*  READ CONCENTRATION DATA ASSIMILATION PARAMETERS
C
      NCARD=66
      DO NSKIP=1,8
       READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISCDA(1),NLCDA,TSCDA,STLAGCDA,SLAGCDA
      STLAGCDA=STLAGCDA/24.0
      WRITE(7,1002)NCARD
      WRITE(7,*) ISCDA,NLCDA,TSCDA
      IF(ISO.GT.0) GO TO 100
C
C66B*  READ CONSTANT SURFACE CONCENTRATION ON NORTH CONC BOUNDARIES
C     SED(1 TO NSED),SND(1,NSND)
C
      NCARD=66
      DO NSKIP=1,8
       READ(1,1)
      END DO
!      IF(ISCDA(1).GT.0) THEN
        WRITE(7,1002)NCARD
        DO L=1,NLCDA
         READ(1,*,IOSTAT=ISO) ICDA(L),JCDA(L),(NCSERA(L,K),K=1,7),
     &                XCDA(L),YCDA(L) 
         WRITE(7,*)  ICDA(L),JCDA(L),(NCSERA(L,K),K=1,7)

         IF(ISO.GT.0) GO TO 100
        END DO
!      END IF
C
C67*  READ NEUTRALLY BUOYANT PARTICLE DRIFTER DATA
C
      NCARD=67
      DO NSKIP=1,22
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISPD,NPD,NPDRT,NWPD,ISLRPD,ILRPD1,ILRPD2,
     $                   JLRPD1, JLRPD2, MLRPDRT,IPLRPD
      WRITE(7,1002)NCARD
      WRITE(7,*) ISPD,NPD,NPDRT,NWPD,ISLRPD,ILRPD1,ILRPD2,
     $                   JLRPD1, JLRPD2, MLRPDRT,IPLRPD
      IF(ISO.GT.0) GO TO 100
C
C68*  READ NEUTRALLY BUOYANT PARTICLE INITIAL POSITIONS
C
      NCARD=68
      DO NSKIP=1,8
      READ(1,1)
      END DO
      DO NP=1,NPD
      READ(1,*,IOSTAT=ISO) RI(NP),RJ(NP),RK(NP)
      WRITE(7,1002)NCARD
      WRITE(7,*) RI(NP),RJ(NP),RK(NP)
      END DO
C
C69*  CONSTANTS FOR LONGITUDE AND LATITUDE OF CELL CENTERS
C
      NCARD=69
      DO NSKIP=1,11
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) CDLON1,CDLON2,CDLON3,CDLAT1,CDLAT2,CDLAT3
      WRITE(7,1002)NCARD
      WRITE(7,*) CDLON1,CDLON2,CDLON3,CDLAT1,CDLAT2,CDLAT3
      IF(ISO.GT.0) GO TO 100
C
C70*  CONTROLS FOR WRITING ASCII OR BINARY DUMP FILES
C
      NCARD=70
      DO NSKIP=1,20
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO)ISDUMP,ISADMP,NSDUMP,TSDUMP,TEDUMP,ISDMPP,
     $          ISDMPU,ISDMPW,ISDMPT,IADJDMP
      WRITE(7,1002)NCARD
      WRITE(7,*)ISDUMP,ISADMP,NSDUMP,TSDUMP,TEDUMP,ISDMPP,
     $          ISDMPU,ISDMPW,ISDMPT,IADJDMP
      IF(ISO.GT.0) GO TO 100
      JSDUMP=1
      NCDUMP=1
C
C71*  CONTROLS FOR HORIZONTAL PLANE SCALAR FIELD CONTOURING
C
      NCARD=71
      DO NSKIP=1,13
      READ(1,1)
      END DO
      DO N=1,7
       READ(1,*,IOSTAT=ISO) ISSPH(N),NPSPH(N),ISRSPH(N),ISPHXY(N)
       WRITE(7,1002)NCARD
      WRITE(7,*) ISSPH(N),NPSPH(N),ISRSPH(N),ISPHXY(N)
      END DO
      IF(ISO.GT.0) GO TO 100
C
C72*  CONTROLS FOR HORIZONTAL PLANE SURFACE ELEVATION OR PRESSURE
C     PLOTTING
C
      NCARD=72
      DO NSKIP=1,10
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISPPH,NPPPH,ISRPPH
      WRITE(7,1002)NCARD
      WRITE(7,*) ISPPH,NPPPH,ISRPPH
      IF(ISO.GT.0) GO TO 100
C
C73*  CONTROLS FOR HORIZONTAL PLANE VELOCITY PLOTTING
C
      NCARD=73
      DO NSKIP=1,9
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISVPH,NPVPH,ISRVPH
      WRITE(7,1002)NCARD
      WRITE(7,*) ISVPH,NPVPH,ISRVPH
      IF(ISO.GT.0) GO TO 100
C
C74*  CONTROLS FOR VERTICAL PLANE SCALAR FIELD CONTOURING
C
      NCARD=74
      DO NSKIP=1,13
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISECSPV,NPSPV(1),ISSPV(1),ISRSPV(1),
     $                     ISHPLTV(1)
      WRITE(7,1002)NCARD
      WRITE(7,*) ISECSPV,NPSPV(1),ISSPV(1),ISRSPV(1),
     $                     ISHPLTV(1)
      SHPLTV(1)=FLOAT(ISHPLTV(1))
      SBPLTV(1)=1.0-SHPLTV(1)
      DO N=2,7
      READ(1,*,IOSTAT=ISO) IDUMMY,NPSPV(N),ISSPV(N),ISRSPV(N),
     $                     ISHPLTV(N)
      WRITE(7,1002)NCARD
      WRITE(7,*) IDUMMY,NPSPV(N),ISSPV(N),ISRSPV(N),
     $                     ISHPLTV(N)
      SHPLTV(N)=FLOAT(ISHPLTV(N))
      SBPLTV(N)=1.0-SHPLTV(N)
      END DO
      IF(ISO.GT.0) GO TO 100
C
C75*  MORE CONTROLS FOR VERTICAL PLANE SCALAR FIELD CONTOURING
C
      NCARD=75
      DO NSKIP=1,8
      READ(1,1)
      END DO
      DO IS=1,ISECSPV
      READ(1,*,IOSTAT=ISO) DUM,NIJSPV(IS),CCTITLE(10+IS)
      WRITE(7,1002)NCARD
      WRITE(7,*) DUM,NIJSPV(IS),CCTITLE(10+IS)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C76*  I,J LOCATIONS DEFINING VERTICAL PLANE FOR CONTOURING
C
      NCARD=76
      DO NSKIP=1,8
      READ(1,1)
      END DO
      DO IS=1,ISECSPV
      DO NPP=1,NIJSPV(IS)
      READ(1,*,IOSTAT=ISO) DUM,ISPV(NPP,IS),JSPV(NPP,IS)
      WRITE(7,1002)NCARD
      WRITE(7,*) DUM,ISPV(NPP,IS),JSPV(NPP,IS)
      IF(ISO.GT.0) GO TO 100
      END DO
      END DO
C
C77*  CONTROLS FOR VERTICAL PLANE VELOCITY VECTOR PLOTTING
C
      NCARD=77
      DO NSKIP=1,10
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISECVPV,NPVPV,ISVPV,ISRVPV
      WRITE(7,1002)NCARD
      WRITE(7,*) ISECVPV,NPVPV,ISVPV,ISRVPV
      IF(ISO.GT.0) GO TO 100
C
C78*  MORE CONTROLS FOR VERTICAL PLANE VELOCITY PLOTTING
C
      NCARD=78
      DO NSKIP=1,9
      READ(1,1)
      END DO
      DO IS=1,ISECVPV
      READ(1,*,IOSTAT=ISO) DUM,NIJVPV(IS),ANGVPV(IS),CVTITLE(10+IS)
      WRITE(7,1002)NCARD
      WRITE(7,*) DUM,NIJVPV(IS),ANGVPV(IS),CVTITLE(10+IS)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C79*  I,J LOCATIONS FOR VERTICAL PLANE VELOCITY PLOTTING
C
      NCARD=79
      DO NSKIP=1,8
      READ(1,1)
      END DO
      DO IS=1,ISECVPV
      DO NPP=1,NIJVPV(IS)
      READ(1,*,IOSTAT=ISO) DUM,IVPV(NPP,IS),JVPV(NPP,IS)
      WRITE(7,1002)NCARD
      WRITE(7,*) DUM,IVPV(NPP,IS),JVPV(NPP,IS)
      IF(ISO.GT.0) GO TO 100
      END DO
      END DO
C
C80*  CONTROLS FOR 3-D GRAPHICS ARRAYS
C
      NCARD=80
      DO NSKIP=1,39
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO)IS3DO,ISR3DO,NP3DO,KPC,NWGG,I3DMIN,I3DMAX,
     $                 J3DMIN,J3DMAX,I3DRW,SELVMAX,BELVMIN
      WRITE(7,1002)NCARD
      WRITE(7,*)IS3DO,ISR3DO,NP3DO,KPC,NWGG,I3DMIN,I3DMAX,
     $                 J3DMIN,J3DMAX,I3DRW,SELVMAX,BELVMIN
      IF(ISO.GT.0) GO TO 100
      NCALL3D=0
      NRCAL3D=0
C
C81*  CONTROLS FOR 3-D GRAPHICS ARRAYS
C
      NCARD=81
      DO NSKIP=1,15
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO)CDUM,IS3DUUU,JS3DUUU,UUU3DMA,UUU3DMI
      WRITE(7,1002)NCARD
      WRITE(7,*)CDUM,IS3DUUU,JS3DUUU,UUU3DMA,UUU3DMI
      IF(ISO.GT.0) GO TO 100
      READ(1,*,IOSTAT=ISO)CDUM,IS3DVVV,JS3DVVV,VVV3DMA,VVV3DMI
      WRITE(7,1002)NCARD
      WRITE(7,*)CDUM,IS3DVVV,JS3DVVV,VVV3DMA,VVV3DMI
      IF(ISO.GT.0) GO TO 100
      READ(1,*,IOSTAT=ISO)CDUM,IS3DWWW,JS3DWWW,WWW3DMA,WWW3DMI
      WRITE(7,1002)NCARD
      WRITE(7,*)CDUM,IS3DWWW,JS3DWWW,WWW3DMA,WWW3DMI
      IF(ISO.GT.0) GO TO 100
      READ(1,*,IOSTAT=ISO)CDUM,IS3DSAL,JS3DSAL,SAL3DMA,SAL3DMI
      WRITE(7,1002)NCARD
      WRITE(7,*)CDUM,IS3DSAL,JS3DSAL,SAL3DMA,SAL3DMI
      IF(ISO.GT.0) GO TO 100
      READ(1,*,IOSTAT=ISO)CDUM,IS3DTEM,JS3DTEM,TEM3DMA,TEM3DMI
      WRITE(7,1002)NCARD
      WRITE(7,*)CDUM,IS3DTEM,JS3DTEM,TEM3DMA,TEM3DMI
      IF(ISO.GT.0) GO TO 100
      READ(1,*,IOSTAT=ISO)CDUM,IS3DDYE,JS3DDYE,DYE3DMA,DYE3DMI
      WRITE(7,1002)NCARD
      WRITE(7,*)CDUM,IS3DDYE,JS3DDYE,DYE3DMA,DYE3DMI
      IF(ISO.GT.0) GO TO 100
      READ(1,*,IOSTAT=ISO)CDUM,IS3DSED,JS3DSED,SED3DMA,SED3DMI
      WRITE(7,1002)NCARD
      WRITE(7,*)CDUM,IS3DSED,JS3DSED,SED3DMA,SED3DMI
      IF(ISO.GT.0) GO TO 100
      READ(1,*,IOSTAT=ISO)CDUM,IS3DSND,JS3DSND,SND3DMA,SND3DMI
      WRITE(7,1002)NCARD
      WRITE(7,*)CDUM,IS3DSND,JS3DSND,SND3DMA,SND3DMI
      IF(ISO.GT.0) GO TO 100
      READ(1,*,IOSTAT=ISO)CDUM,IS3DTOX,JS3DTOX,TOX3DMA,TOX3DMI
      WRITE(7,1002)NCARD
      WRITE(7,*)CDUM,IS3DTOX,JS3DTOX,TOX3DMA,TOX3DMI
      IF(ISO.GT.0) GO TO 100
C
C82*  READ NUMBER OF PERIODIC FORCING (TIDAL) CONSTITUENT AND HARMONIC
C     ANALYSIS PARAMETERS
C
      NCARD=82
      DO NSKIP=1,10
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO) ISLSHA,MLLSHA,NTCLSHA,ISLSTR,ISHTA
      WRITE(7,1002)NCARD
      WRITE(7,*) ISLSHA,MLLSHA,NTCLSHA,ISLSTR,ISHTA
      IF(ISO.GT.0) GO TO 100
C
C83*  READ HARMONIC ANALYSIS AND TIME SERIES LOCATIONS AND SWITCHES
C
      NCARD=83
      DO NSKIP=1,12
      READ(1,1)
      END DO
      DO M=1,MLLSHA
      READ(1,*,IOSTAT=ISO) ILLSHA(M),JLLSHA(M),LSHAP(M),LSHAB(M),
     $          LSHAUE(M),LSHAU(M),CLSL(M)
      WRITE(7,1002)NCARD
      WRITE(7,*) ILLSHA(M),JLLSHA(M),LSHAP(M),LSHAB(M),
     $          LSHAUE(M),LSHAU(M),CLSL(M)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C84*  CONTROLS FOR SAVING TIME SERIES
C
      NCARD=84
      DO NSKIP=1,17
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO)ISTMSR,MLTMSR,NBTMSR,NSTMSR,NWTMSR,NTSSTSP,
     $               TCTMSR
      WRITE(7,1002)NCARD
      WRITE(7,*)ISTMSR,MLTMSR,NBTMSR,NSTMSR,NWTMSR,NTSSTSP,
     $               TCTMSR
C NEXT LINE ADDED BY DON KINERY
C    $              ,IHYDOUT,NWHYDOUT
      IF(ISO.GT.0) GO TO 100
c     MLTMSR=MIN(MLTMSR,18)
      JSTMSR=1
      NCTMSR=1
C NEXT TWO LINES ADDED BY DON KINERY
      JSHYDOUT=1
      NCHYDOUT=1
C
C85*  CONTROLS FOR SAVING TIME SERIES
C
      NCARD=85
      DO NSKIP=1,7
      READ(1,1)
      END DO
      DO ITSSS=1,NTSSTSP
       READ(1,*,IOSTAT=ISO)IDUM,MTSSTSP(ITSSS)
       WRITE(7,1002)NCARD
      WRITE(7,*)IDUM,MTSSTSP(ITSSS)
       IF(ISO.GT.0) GO TO 100
      END DO
C
C86*  CONTROLS FOR SAVING TIME SERIES
C
      NCARD=86
      DO NSKIP=1,9
      READ(1,1)
      END DO
      DO ITSSS=1,NTSSTSP
       DO MTSSS=1,MTSSTSP(ITSSS)
       READ(1,*,IOSTAT=ISO)IDUM,IDUM,TSSTRT(MTSSS,ITSSS),
     $                               TSSTOP(MTSSS,ITSSS)
       WRITE(7,1002)NCARD
      WRITE(7,*)IDUM,IDUM,TSSTRT(MTSSS,ITSSS),
     $                               TSSTOP(MTSSS,ITSSS)
       IF(ISO.GT.0) GO TO 100
       END DO
      END DO
C
C87*  CONTROLS FOR SAVING TIME SERIES
C
      NCARD=87
      DO NSKIP=1,17
      READ(1,1)
      END DO
      DO M=1,MLTMSR
      READ(1,*,IOSTAT=ISO)ILTMSR(M),JLTMSR(M),NTSSSS(M),MTMSRP(M),
     $       MTMSRC(M),MTMSRA(M),MTMSRUE(M),MTMSRUT(M),MTMSRU(M),
     $                 MTMSRQE(M),MTMSRQ(M),CLTMSR(M)
      WRITE(7,1002)NCARD
      WRITE(7,*)ILTMSR(M),JLTMSR(M),NTSSSS(M),MTMSRP(M),
     $       MTMSRC(M),MTMSRA(M),MTMSRUE(M),MTMSRUT(M),MTMSRU(M),
     $                 MTMSRQE(M),MTMSRQ(M),CLTMSR(M)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C88*  CONTROLS FOR EXTRACTING INSTANTANEOUS VERTICAL SCALAR FIELD
C     PROFILES
C
      NCARD=88
      DO NSKIP=1,10
      READ(1,1)
      END DO
      READ(1,*,IOSTAT=ISO)ISVSFP,MDVSFP,MLVSFP,TMVSFP,TAVSFP
      WRITE(7,1002)NCARD
      WRITE(7,*)ISVSFP,MDVSFP,MLVSFP,TMVSFP,TAVSFP
      IF(ISO.GT.0) GO TO 100
      JSVSFP=1
C
C89*  SAMPLING DEPTHS FOR EXTRACTING INST VERTICAL SCALAR FIELD
C     PROFILES
C
      NCARD=89
      DO NSKIP=1,7
      READ(1,1)
      END DO
      DO M=1,MDVSFP
      READ(1,*,IOSTAT=ISO)IDUM,DMVSFP(M)
      WRITE(7,1002)NCARD
      WRITE(7,*)IDUM,DMVSFP(M)
      IF(ISO.GT.0) GO TO 100
      END DO
C
C90*  HORIZONTAL SPACE-TIME LOCATIONS FOR SAMPLING
C
      NCARD=90
      DO NSKIP=1,9
      READ(1,1)
      END DO
      DO M=1,MLVSFP
      READ(1,*,IOSTAT=ISO)IDUM,TIMVSFP(M),IVSFP(M),JVSFP(M)
      WRITE(7,1002)NCARD
      WRITE(7,*)IDUM,TIMVSFP(M),IVSFP(M),JVSFP(M)
      IF(ISO.GT.0) GO TO 100
      END DO
      NTS=NTC*NTSPTC
      NBVSFP=NTC*NTSPTC
      NSVSFP=0
      DO M=1,MLVSFP
      TIMVSFP(M)=TMVSFP*(TIMVSFP(M)+TAVSFP)
      END DO
      DT=TIDALP*FLOAT(NFLTMT)/FLOAT(NTSPTC)
      DO M=1,MLVSFP
      NTMP=NINT( (TIMVSFP(M)-TCON*TBEGIN)/DT )
      NTMP=MIN(NTMP,NTS)
      NBVSFP=MIN(NBVSFP,NTMP)-1
      NSVSFP=MAX(NSVSFP,NTMP)+1
      NTVSFP(M)=NTMP
      END DO
      DO M=1,MLVSFP
      TIMVSFP(M)=(TIMVSFP(M)/TMVSFP)-TAVSFP
      END DO
C91
      NCARD=91
      call SkipComm(1, 'C')
      read(1,* ,IOSTAT=ISO)iyear1,irecd,ilong,ifed_inc,inc_re,w_ts,
     &    ab_ts,h_car,IWQS,I_CENT,I_CTIME,I_UTIME,PATH,PATH1    
      WRITE(7,1002)NCARD
      IF(ISO.GT.0) GO TO 100
      IF(I_CENT.GT.0)I_CENT=I_CTIME
      irecd=TBEGIN/30     
      IF(ilong.EQ.1.and.irecd.gt.0) THEN
      ITMP=iyear1-1990                   ! Starting from 1990. Need to change if startinf from different year J.S. 6/2016 
      ITMP1=(ITMP+1)/4
      tplus=ITMP*365+ITMP1
 !     TBEGIN=TBEGIN+ITMP*365+ITMP1  
      ELSE
      tplus=0
      ENDIF      
      irecdwq=irecd ! for save wq data
      
 !     IF(irecd.gt.0)irecd=TBEGIN/30

C92
      NCARD=92
      call SkipComm(1, 'C')  
	READ(1,*,IOSTAT=ISO)IOP_SAVE,irunpcb,
     &	idiaout,lcadia,ltimstep,RCDAY,RESPCB,IPCON,ISVIN,PATHpcb
        IF(ISO.GT.0) GO TO 100  
             
        IF(irunpcb.GT.0) THEN
         write(*,*)' Run PCB model'
         if(IOP_SAVE.GT.0) IOP_SAVE=-IOP_SAVE
         if(ISTRAN(8).ge.1) then
          write(*,*) 'Turn of water quality model C#6 ISTRAN(8)!'
          stop
         endif
         if(ISTRAN(5).LE.0) then
          write(*,*) 'Turn of toxic model C#6 ISTRAN(5)!'
          stop
         endif
!    Starting from 1990. Need to change if startinf from different year J.S. 7/6/2016 
        ITMP=iyear1-1990         
        ITMP1=(ITMP+1)/4
        tplus=ITMP*365+ITMP1 
        irecdwq=irecd        
        ENDIF
  !     irecd=TBEGIN/30
        write(*,*)'Starting day =', TBEGIN,tplus
        write(*,*)'Read dynamic file from ',irecd
        
!        if(TBEGIN.LT.30) irecd=0
C93 Dye study
C
      NCARD=93
      call SkipComm(1, 'C')  
	READ(1,*,IOSTAT=ISO)ISUBMODE,NTRNVA,IRDYE,JRDYE,
     &     KRDYE,IRELSOP,RELMASS,RELTIME,NSTEPREL
      IF(ISO.GT.0) GO TO 100
      if(NTRNVA.GT.0) then
      write(*,*)'Counduct dye study IRELSOP=',IRELSOP
       if(irunpcb.GT.0.or.ifed_inc.LT.0) then
        write(*,*)'Trun off PCB or WQ model !'
       stop
       endif
      endif
!      IF(IRELSOP.EQ.3)irecd=NTC/30
C
      if(IRELSOP.LT.5) GO TO 2000
C
C94 TIME SETTING FOR RESIDENCE TIME CALCULATING
      NCARD=94
      CALL SkipComm(1,'C')
      READ(1,*,IOSTAT=ISO) TBS,TES,DPF,IVRDOP
      write(*,*)'TES =', TES
      IF(ISO.GT.0) GO TO 100
      GO TO 2000
C
C**********************************************************************C
C
C **  WRITE INPUT ERROR MESSAGES AND TERMINATE RUN
C

  100 WRITE(6,1001)NCARD
      WRITE(8,1001)NCARD
      WRITE(7,1001)NCARD
      STOP
 2000 CONTINUE
c--
      IGrADS=0      ! for GrADS, ji, 10/20/98
      call inputw   ! ji, read efdcwin.inp to override some efdc.inp parameters, 10/16/98
c--
C
C**********************************************************************C
C
C **  NOW REWIND UNIT 1 & READ IN AS CHARACTER TO WRITE TO UNIT 7
C
C----------------------------------------------------------------------C
C
      REWIND (1)
   21 READ(1,22,END=24) TEXT
      WRITE (7,23) TEXT
      GO TO 21
   24 CONTINUE
      CLOSE(1)
   22 FORMAT (A80)
   23 FORMAT (1X,A80)
C
C**********************************************************************C
C
C **  READ CELL TYPES FROM FILES cell.inp AND celllt.inp
C
C----------------------------------------------------------------------C
C
      OPEN (1,FILE='cell.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES AND DETERMINE FILE FORMAT
C
      DO IS=1,4
      READ(1,1)
      END DO
      READ(1,66)JCTMP
      CLOSE(1)
      OPEN (1,FILE='cell.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND HEADER LINES
C
      DO IS=1,4
      READ(1,1)
      END DO
C
      IF(JCTMP.NE.JC) THEN
C **    READ OLD FILE FORMAT
        JACROSS=JC
        IF(JC.GT.120)JACROSS=120
        DO JT=1,JC,JACROSS
        JF=JT
        JLAST=JT+JACROSS-1
        IF(JLAST.GT.JC) JLAST=JC
        WRITE (7,8)JF,JLAST
        DO I=1,IC
        READ(1,6,IOSTAT=ISO) (IJCT(I,J),J=JF,JLAST)
        IF(ISO.GT.0) GO TO 800
        WRITE (7,16) (IJCT(I,J),J=JF,JLAST)
        END DO
        WRITE(7,15)
        END DO
       ELSE
C **    READ NEW FILE FORMAT
C       READ(1,66)JCTMP
        IF(IC.GT.120) THEN
          IACROSS=IC
          DO IT=1,IC,IACROSS
           IFIRST=IT
           ILAST=IT+IACROSS-1
           IF(ILAST.GT.IC) ILAST=IC
           WRITE (7,88)IFIRST,ILAST
           DO J=JC,1,-1
           READ(1,66,IOSTAT=ISO)JDUMY,(IJCT(I,J),I=IFIRST,ILAST)
           IF(ISO.GT.0) GO TO 800
           WRITE (7,166)JDUMY,(IJCT(I,J),I=IFIRST,ILAST)
           END DO
           WRITE(7,15)
          END DO
         ELSE
          IFIRST=1
          ILAST=IC
          WRITE (7,88)IFIRST,ILAST
          DO J=JC,1,-1
           READ(1,66,IOSTAT=ISO)JDUMY,(IJCT(I,J),I=IFIRST,ILAST)
           IF(ISO.GT.0) GO TO 800
           WRITE (7,166)JDUMY,(IJCT(I,J),I=IFIRST,ILAST)
          END DO
          WRITE(7,15)
        END IF
      END IF
C
      CLOSE(1)
C
C **  IF JCTMP NE JC WRITE newcell.inp FILE
C
      IF(JCTMP.NE.JC) THEN
        OPEN(1,FILE='newcell.inp',STATUS='UNKNOWN')
        IACROSS=IC
        IF(IC.GT.100)IACROSS=100
        DO IT=1,IC,IACROSS
        IFIRST=IT
        ILAST=IT+IACROSS-1
        IF(ILAST.GT.IC) ILAST=IC
        DO J=JC,1,-1
        WRITE(1,66)J,(IJCT(I,J),I=IFIRST,ILAST)
        END DO
        END DO
        CLOSE(1)
      END IF
C
C----------------------------------------------------------------------C
C
      OPEN (1,FILE='cell.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES AND DETERMINE FILE FORMAT
C
      DO IS=1,4
      READ(1,1)
      END DO
      READ(1,66)JCTMP
      CLOSE(1)
      OPEN (1,FILE='cell.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,4
      READ(1,1)
      END DO
C
      IF(JCTMP.NE.JC) THEN
C **    READ OLD FILE FORMAT
        JACROSS=JC
        IF(JC.GT.120)JACROSS=120
        DO JT=1,JC,JACROSS
        JF=JT
        JLAST=JT+JACROSS-1
        IF(JLAST.GT.JC) JLAST=JC
        WRITE (7,8)JF,JLAST
        DO I=1,IC
        READ(1,6,IOSTAT=ISO) (IJCTLT(I,J),J=JF,JLAST)
        IF(ISO.GT.0) GO TO 800
        WRITE (7,16) (IJCTLT(I,J),J=JF,JLAST)
        END DO
        WRITE(7,15)
        END DO
       ELSE
C **    READ NEW FILE FORMAT
C       READ(1,66)JCTMP
        IF(IC.GT.120) THEN
          IACROSS=IC
          DO IT=1,IC,IACROSS
           IFIRST=IT
           ILAST=IT+IACROSS-1
           IF(ILAST.GT.IC) ILAST=IC
           WRITE (7,88)IFIRST,ILAST
           DO J=JC,1,-1
           READ(1,66,IOSTAT=ISO)JDUMY,(IJCTLT(I,J),I=IFIRST,ILAST)
           IF(ISO.GT.0) GO TO 800
           WRITE (7,166)JDUMY,(IJCTLT(I,J),I=IFIRST,ILAST)
           END DO
           WRITE(7,15)
          END DO
         ELSE
          IFIRST=1
          ILAST=IC
          WRITE (7,88)IFIRST,ILAST
          DO J=JC,1,-1
           READ(1,66,IOSTAT=ISO)JDUMY,(IJCTLT(I,J),I=IFIRST,ILAST)
           IF(ISO.GT.0) GO TO 800
           WRITE (7,166)JDUMY,(IJCTLT(I,J),I=IFIRST,ILAST)
          END DO
          WRITE(7,15)
        END IF
      END IF
C
      CLOSE(1)
C
      IF(ISLTMT.GE.1)THEN
      DO J=1,JC
      DO I=1,IC
      IJCT(I,J)=IJCTLT(I,J)
      END DO
      END DO
      END IF
C
    8 FORMAT (1X,' CELL TYPE ARRAY,J=',I5,2X,'TO J=',I5,//)
   88 FORMAT (1X,' CELLLT TYPE ARRAY,I=',I5,2X,'TO I=',I5,//)
C
C**********************************************************************C
C
C **  IF ISPGNS GE 1, READ IN NORTH-SOUTH BOUNDARY CELLS FROM
C **  FILE mappgns.inp TO SPECIFY A PERIODIC DOMAIN IN THE NORTH-SOUTH
C **  DIRECTION
C
      IF(ISPGNS.GE.1) THEN
C
      OPEN (1,FILE='mappgns.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,8
      READ(1,1)
      END DO
C
      READ(1,*,IOSTAT=ISO) NPNSBP
      IF(ISO.GT.0) GO TO 950
C
      DO NPNS=1,NPNSBP
      READ(1,*,IOSTAT=ISO) ISPNS(NPNS),JSPNS(NPNS),
     $                     INPNS(NPNS),JNPNS(NPNS)
      IF(ISO.GT.0) GO TO 950
      END DO
C
      CLOSE(1)
      END IF
C
C**********************************************************************C
C
C **  GENERATE CELL MAPPINGS
C
      CALL CELLMAP
c
c spread sediment property to entire domain, after cellmap is called and LIJ(I,J) is ready, !@
      if(ISTRAN(6).gt.0) then    ! #01
             DO L=2,LA
             XLWSEDo(L)=xWSEDo(1)   !For SL, 2/1/03
             XLTAUD(L)=xTAUD(1)
             XLWRSPo(L)=xWRSPO(1)
             XLTAUR(L,kbm)=xTAUR(1)
             END DO
c            DO L=2,LA
c            XLWSEDo(L)=xWSEDo(4)   !@, for multiple sediment bed property, 4/2/00
c            XLTAUD(L)=xTAUD(4)
c            XLWRSPo(L)=xWRSPO(4) ! Area E, L005, the rest
c            XLTAUR(L,kbm)=xTAUR(4)
c            END DO
c            DO I=31,IC
c            DO J=1,24
c            L=LIJ(I,j)
c            XLWSEDo(L)=xWSEDo(1)   ! Area A, L006
c            XLTAUD(L)=xTAUD(1)
c            XLWRSPo(L)=xWRSPO(1)
c            XLTAUR(L,kbm)=xTAUR(1)
c            ENDDO
c            enddo
c            DO I= 1,ic
c            DO J=41,jc
c            L=LIJ(I,j)
c            XLWSEDo(L)=xWSEDo(2)   ! Area B, L001
c            XLTAUD(L)=xTAUD(2)
c            XLWRSPo(L)=xWRSPO(2)
c            XLTAUR(L,kbm)=xTAUR(2)
c            ENDDO
c            enddo
c            DO I=31,ic
c            DO J=25,40
c            L=LIJ(I,j)
c            XLWSEDo(L)=xWSEDo(3)   ! Area C, LZ40
c            XLTAUD(L)=xTAUD(3)
c            XLWRSPo(L)=xWRSPO(3)
c            XLTAUR(L,kbm)=xTAUR(3)
c            ENDDO
c            enddo
c
      if(KBM.ge.2) then ! initialize XLTAUR(LC,KBM)
	do K=1,KBM-1
      do L=2,LC-1
      XLTAUR(L,K)=taurc(k) ! bottom layers
	enddo
	enddo
	endif
c
c read itaumap.inp, the sediment bed critical shear stress map
c
c multi-layer sediment bed, spatially varing critical shear stress: deposition and resuspension
c use taumap.inp to specify the critical stress at every grid cell, see taumap.inp for more information
c jeff ji, 3/30/01
c
	ITMAP=0
      open(487,file='taumap1.inp',status='old',err=791)
	ITMAP=1
      do i=1,17
      read(487,*)
      enddo
      do i=1,8
      read(487,*) ix,taud8(ix),(taur8(ix,k),k=1,kbm)
      enddo
c
      read(487,*)
      read(487,*)
      read(487,*)
      do j=jc,1,-1                           ! #9
      read(487,751) jxx,(itaumap(i,j),i=1,ic)
c     write(987,751) jxx,(itaumap(i,j),i=1,ic)   ! check
      if(jxx.ne.j) then
      write(6,*) "itaumap.inp ", j,jxx
      stop
      endif
751   format(i3,2x,999i1)
c process
      do i=1,ic
      if(ijct(i,j).le.0.or.ijct(i,j).ge.9) then
      itaumap(i,j)=-999
      endif
      enddo
c      write(986,751) jxx,(itaumap(i,j),i=1,ic)   ! check
      enddo                                 ! #9
      write(6,*) "taumap.inp is read successfully"
c
c get critical shear stresses for resuspension and deposition
      do L=2,LC-1
      I=L2I(L)
      J=L2J(L)
      K=itaumap(i,j)
      if(k.ge.9.or.k.le.0) then
      write(6,*) " taumap.inp error ", i,j,k
      stop
      endif
      xltaud(L)=xltaud(L)*taud8(K)
      do I2=1,KBM
      xLTAUR(L,I2)=xLTAUR(L,I2)*tauR8(K,I2)
      enddo
c      write(985,931) L,I,J,K,xltaud(L),(xlTAUR(L,I2),I2=1,KBM)
931   format(4i4,999e12.4)
      enddo
c
	go to 792
c
791	continue
      ITMAP=0
      open(487,file='taumap.inp',status='old',err=792)
	ITMAP=1
	read(487,*,end=793)
	read(487,*)IOP_t,IZON_t   !IOPTION and number of zone <8
	if(IOP_t.eq.3) then
	 DO L=1,IZON_t
	 read(487,*)taud8(L),(taur8(L,k),k=1,kbm)
	 ENDDO
	 ! read map
	 do L=2,LC-1
	  read(487,*)LTMP,IMP_t
	  I_t=int(LTMP/1000)
	  J_t=LTMP-I_t*1000
	  L_t=LIJ(I_t,J_t)
	  xLTAUR(L_t,1)=taur8(IMP_t,1)
	  xLTAUR(L_t,2)=taur8(IMP_t,2)
	  xltaud(L)=taud8(IMP_t)
	 enddo 
	elseif(IOP_t.eq.1) then	 
	 do L=2,LC-1
	 read(487,*)LTMP,IZON_t,DEP_t,ER1_t,ER2_t
	  I_t=int(LTMP/1000)
	  J_t=LTMP-I_t*1000
	  L_t=LIJ(I_t,J_t)
	  xLTAUR(L_t,1)=ER1_t
	  xLTAUR(L_t,2)=ER2_t
	  xltaud(L)=DEP_t
	 enddo
	else
		do L=2,LC-1
		read(487,*)LTMP,IZON_t,DEP_t,ER1_t,ER2_t
		I_t=int(LTMP/1000)
	  J_t=LTMP-I_t*1000
	  L_t=LIJ(I_t,J_t)
	  xLTAUR(L_t,1)=ER1_t*TAUR(1)*10
	  xLTAUR(L_t,2)=ER2_t*TAUR(1)
	  xltaud(L)=RTAUD*TAUR(1)
	  enddo
	endif
793	close(487)
	write(6,*) "taumap.inp is not used"
792	continue
c
      endif                    ! #01
c
C
C**********************************************************************C
C
C **  READ IN CELL CENTER DEPTHS AND BOTTOM BED ELEVATION FOR CARTESIAN
C **  OR MIXED CATERSIAN CURVILINEAR GRID FORM FILE depth.inp.  IF THE
C **  NUMBER OF VARIALBLE CELLS EQUALS NUMBER OF WATER CELLS OR
C **  ISCLO=1 DEPTHS ARE READ FROM THE FILE dxdy.inp
C
C----------------------------------------------------------------------C
C
c     LCM2=LC-2
c     IF (LCM2.GT.LVC) THEN
C
c     OPEN(1,FILE='depth.inp',STATUS='UNKNOWN')
C     GO TO 999
C
C     WRITE (7,9)
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
c     DO IS=1,5
c     READ(1,1)
c     END DO
C
c     IF (JC.LE.30) THEN
c       DO I=1,IC
c       READ(1,7,IOSTAT=ISO) (RTMP1IJ(I,J),J=1,JC)
c       IF(ISO.GT.0) GO TO 820
C       WRITE (7,17) (RTMP1IJ(I,J),J=1,JC)
c       END DO
c      ELSE
c       DO JJ=1,JC,30
c       JF=JJ
c       JLAST=JF+29
c       IF (JLAST.GT.JC) JLAST=JC
c       DO I=1,IC
c       READ(1,7,IOSTAT=ISO) (RTMP1IJ(I,J),J=JF,JLAST)
c       IF(ISO.GT.0) GO TO 820
C       WRITE (7,17) (RTMP1IJ(I,J),J=JF,JLAST)
c       END DO
C       WRITE (7,15)
c       END DO
c     END IF
C
c     DO L=2,LA
c     HMP(L)=RTMP1IJ(IL(L),JL(L)
c     END DO
C
C **  SKIP OVER BLANK, TITLE AND AND HEADER LINES
C
c     DO IS=1,5
c     READ(1,1)
c     END DO
C
c     IF (JC.LE.30) THEN
c       DO I=1,IC
c       READ(1,7,IOSTAT=ISO) (RTMP1IJ(I,J),J=1,JC)
c       IF(ISO.GT.0) GO TO 820
C       WRITE (7,17) (RTMP1IJ(I,J),J=1,JC)
c       END DO
c      ELSE
c       DO JJ=1,JC,30
c       JF=JJ
c       JLAST=JF+29
c       IF (JLAST.GT.JC) JLAST=JC
c       DO I=1,IC
c       READ(1,7,IOSTAT=ISO) (RTMP1IJ(I,J),J=JF,JLAST)
c       IF(ISO.GT.0) GO TO 820
C       WRITE (7,17) (RTMP1IJ(I,J),J=JF,JLAST)
c       END DO
C       WRITE (7,15)
c       END DO
c     END IF
C
c     DO L=2,LA
c     BELV(L)=RTMP1IJ(IL(L),JL(L))
c     END DO
C
C **  SKIP OVER BLANK, TITLE AND AND HEADER LINES
C
c     DO IS=1,5
c     READ(1,1)
c     END DO
C
c     IF (JC.LE.30) THEN
c       DO I=1,IC
c       READ(1,7,IOSTAT=ISO) (RTMP1IJ(I,J),J=1,JC)
c       IF(ISO.GT.0) GO TO 820
C       WRITE (7,17) (RTMP1IJ(I,J),J=1,JC)
c       END DO
c      ELSE
c       DO JJ=1,JC,30
c       JF=JJ
c       JLAST=JF+29
c       IF (JLAST.GT.JC) JLAST=JC
c       DO I=1,IC
c       READ(1,7,IOSTAT=ISO) (RTMP1IJ(I,J),J=JF,JLAST)
c       IF(ISO.GT.0) GO TO 820
C       WRITE (7,17) (RTMP1IJ(I,J),J=JF,JLAST)
c       END DO
C       WRITE (7,15)
c       END DO
c     END IF
C
c     DO L=2,LA
c     ZBR(L)=RTMP1IJ(IL(L),JL(L))
c     END DO
C
c     CLOSE (1)
C
c     END IF
C
   15 FORMAT (1H1)
C   6 FORMAT (60I2)
    6 FORMAT (120I1)
   66 FORMAT (I3,2X,520I1)
    9 FORMAT (1H1,' DEPTH ARRAY:',//)
   16 FORMAT (1X,120I1)
  166 FORMAT (1X,I3,2X,520I1)
    7 FORMAT (30F4.1)
   17 FORMAT(1X,30F4.1)
C
C**********************************************************************C
C
C **  READ CURVILINEAR-ORTHOGONAL OR VARIABLE CELL DATA FROM FILE
C **  dxdy.inp
C
C----------------------------------------------------------------------C
C
C **  INITIALIZE CELL DIMENSIONS TO CONSTANT CARTESIAN OR DUMMY VALUES
C
      DO L=1,LC
      DXP(L)=DX*DXYCVT
      DYP(L)=DY*DXYCVT
      ZBR(L)=ZBRADJ
      END DO
C
C **  READ IN DX, DY, DEPTH AND BOTTOM ELEVATION AT CELL CENTERS OF
C **  VARIABLE CELLS
C
      IF (LVC.GT.0) THEN
      OPEN(1,FILE='dxdy.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,4
      READ(1,1)
      END DO
C
      IF (ISVEG.EQ.0) THEN
        DO LT=1,LVC
C       READ(1,*,IOSTAT=ISO)I,J,DXIJ,DYIJ,HIJ,BELVIJ
        READ(1,*,IOSTAT=ISO)I,J,DXIJ,DYIJ,HIJ,BELVIJ,ZBRIJ
        IF(ISO.GT.0) GO TO 830
        L=LIJ(I,J)
        DXP(L)=DXYCVT*DXIJ
        DYP(L)=DXYCVT*DYIJ
        HMP(L)=HADJ + HCVRT*HIJ
        HMP(L)=MAX(HMP(L),HMIN)
        BELV(L)=BELADJ + BELCVRT*BELVIJ
!        BELV(L)=min(BELV(L),-HMIN)
        ZBR(L)=ZBRADJ + ZBRCVRT*ZBRIJ
        END DO
       ELSE
        DO LT=1,LVC
C       READ(1,*,IOSTAT=ISO)I,J,DXIJ,DYIJ,HIJ,BELVIJ
        READ(1,*,IOSTAT=ISO)I,J,DXIJ,DYIJ,HIJ,BELVIJ,ZBRIJ,MVEGIJT
        IF(ISO.GT.0) GO TO 830
        L=LIJ(I,J)
        DXP(L)=DXYCVT*DXIJ
        DYP(L)=DXYCVT*DYIJ
        HMP(L)=HADJ + HCVRT*HIJ
        HMP(L)=MAX(HMP(L),HMIN)
        BELV(L)=BELADJ + BELCVRT*BELVIJ
 !       BELV(L)=min(BELV(L),-HMIN)
        ZBR(L)=ZBRADJ + ZBRCVRT*ZBRIJ
c	  write(302,3020) L, ZBR(L),ZBRADJ,ZBRCVRT,ZBRIJ
3020	format(i6,999f8.4)
        MVEGL(L)=MVEGIJT
        END DO
      END IF
C
C ** MODIFY DX AND DY FOR 1D CHANNELS
C
      IF(IS1DCHAN.GT.0) THEN
       DO L=2,LA
         IF(LCT(L).EQ.6) DYP(L)=1.
         IF(LCT(L).EQ.7) DXP(L)=1.
       END DO
      END IF
C
      CLOSE (1)
      END IF
C
C**********************************************************************C
C
C **  OPEN FILE moddxdy.inp TO MODIFY INPUT VALUES OF DX AND DY
C
      IF(IMDXDY.GT.0) THEN
      OPEN(1,FILE='moddxdy.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,4
      READ(1,1)
      END DO
C
      READ(1,*) NMDXDY
      IF (NMDXDY.GE.1) THEN
        DO NMD=1,NMDXDY
        READ(1,*)ITMP,JTMP,RMDX,RMDY
        LTMP=LIJ(ITMP,JTMP)
        DXP(LTMP)=RMDX*DXP(LTMP)
        DYP(LTMP)=RMDY*DYP(LTMP)
        END DO
      END IF
C
      CLOSE(1)
      END IF
C
C**********************************************************************C
C
C **  OPEN FILE modchan.inp TO INSERT SUBGRID CHANNELS INTO
C **  HOST CELLS
C
      MDCHH=0
      IF(ISCHANT.GT.0) THEN
      OPEN(1,FILE='modchan.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,8
      READ(1,1)
      END DO
C
      READ(1,*) MDCHH,MDCHHD,MDCHHD2
      READ(1,*) MDCHITM,MDCHHQ,QCHERR
      IF (MDCHH.GE.1) THEN
        DO NMD=1,MDCHH
        READ(1,*)MDCHTYP(NMD),IMDCHH(NMD),JMDCHH(NMD),
     $                        IMDCHU(NMD),JMDCHU(NMD),
     $                        IMDCHV(NMD),JMDCHV(NMD)
        QCHANU(NMD)=0.
        QCHANUN(NMD)=0.
        QCHANV(NMD)=0.
        QCHANVN(NMD)=0.
        END DO
      END IF
C
      CLOSE(1)
      END IF
C
C**********************************************************************C
C
C **  OPEN FILE chansec.inp FOR 1-D CHANNEL CROSS SECTION DATA
C
      IF(IS1DCHAN.GT.0) THEN
      OPEN(1,FILE='chansec.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,21
      READ(1,1)
      END DO
C
      DO LL=1,LC-2
C
      READ(1,*) ISEC,JSEC,ISECDAT,NXYSDATT,BELVBT,RMULADJ
      L=LIJ(ISEC,JSEC)
      NXYSDAT(L)=NXYSDATT
      BELVB(L)=BELVBT
      IF(LCT(L).EQ.6) THEN
        DO ND=1,NXYSDAT(L)
         READ(1,*)EHXYS(ND,L),AREADY(ND,L),WPERDY(ND,L),SURFDY(ND,L)
         AREADX(ND,L)=1.
         WPERDX(ND,L)=1.
         SURFDX(ND,L)=0.
        END DO
      END IF
      IF(LCT(L).EQ.7) THEN
        DO ND=1,NXYSDAT(L)
         READ(1,*)EHXYS(ND,L),AREADX(ND,L),WPERDX(ND,L),SURFDX(ND,L)
         AREADY(ND,L)=1.
         WPERDY(ND,L)=1.
         SURFDY(ND,L)=0.
        END DO
      END IF
      BELVB(L)=RMULADJ*BELVB(L)
      DO ND=1,NXYSDAT(L)
       EHXYS(ND,L)=RMULADJ*EHXYS(ND,L)
       AREADX(ND,L)=RMULADJ*RMULADJ*AREADX(ND,L)
       WPERDX(ND,L)=RMULADJ*WPERDX(ND,L)
       SURFDX(ND,L)=RMULADJ*SURFDX(ND,L)
       AREADY(ND,L)=RMULADJ*RMULADJ*AREADY(ND,L)
       WPERDY(ND,L)=RMULADJ*WPERDY(ND,L)
       SURFDY(ND,L)=RMULADJ*SURFDY(ND,L)
      END DO
      IF(ISECDAT.EQ.0) THEN
        DO ND=1,NXYSDAT(L)
         EHXYS(ND,L)=EHXYS(ND,L)-BELVB(L)
        END DO
      END IF
C
      END DO
C
      CLOSE(1)
      END IF
C
C
C**********************************************************************C
C
C **  OPEN FILE chanjun.inp FOR 1-D CHANNEL JUNCTION DATA
C
      IF(IS1DCHAN.GT.0) THEN
c
      OPEN(1,FILE='chanjun.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,17
      READ(1,1)
      END DO
C
      NJUNX=0
      NJUNY=0
      READ(1,*) NJUNTMP
cdia      WRITE(6,6543) NJUNTMP
C
      IF(NJUNTMP.GT.0) THEN
C
      DO NJ=1,NJUNTMP
       READ(1,*) IJUNTMP,JJUNTMP,JDIR,JUNTYP
       IF(JDIR.EQ.1) THEN
         NJUNX=NJUNX+1
         LJUNX(NJUNX)=LIJ(IJUNTMP,JJUNTMP)
         JUNTPX(NJUNX)=JUNTYP
       END IF
       IF(JDIR.EQ.2) THEN
         NJUNY=NJUNY+1
         LJUNY(NJUNY)=LIJ(IJUNTMP,JJUNTMP)
         JUNTPY(NJUNY)=JUNTYP
       END IF
      END DO
C
      END IF
C
      CLOSE(1)
C
      END IF
C
 6543 FORMAT(' NJUNTMP = ',I5)
C
C**********************************************************************C
C
C **  OPEN FILE gwater.inp TO SPECIFY GROUNDWATER INTERACTION
C
      ISGWIE=0
c      ISGWI =  1= TO ACTIVATE SOIL MOISTURE BALANCE WITH DRYING AND WETTING    |
      IF(ISGWIT.GT.0) THEN
      OPEN(1,FILE='gwater.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,6
      READ(1,1)
      END DO
C
      READ(1,*) ISGWIE
c     WRITE(6,339)ISGWIE
      IF (ISGWIE.GE.1) THEN
        READ(1,*) DAGWZ,RNPOR,RIFTRM
c       WRITE(6,907) DAGWZ,RNPOR,RIFTRM
       ELSE
        DAGWZ=0.0
        RNPOR=1.E-12
        RIFTRM=0.0
      END IF
C
      CLOSE(1)
      END IF
C
  339 FORMAT(2I5,6F14.5)
C
C**********************************************************************C
C
C **  WRITE NEW DXDY FILES TO UPDATE OLD VERSIONS OF THE MODEL
C **  OR INCORPORATE MODIFIED DX'S AND DY'S DIRECTLY INTO
C **  DXDY.INP FILE
C
c     DXTMP=20.
c     DYTMP=20.
c      OPEN(1,FILE='newdxdy.inp',STATUS='UNKNOWN') !Ji, 11/3/00
      OPEN(1,FILE='newdxdy.out',STATUS='UNKNOWN')
      DO J=1,JC
      DO I=1,IC
      L=LIJ(I,J)
      IF (IJCT(I,J).GE.1.AND.IJCT(I,J).LT.9) THEN
        WRITE(1,339)IL(L),JL(L),DXP(L),DYP(L),HMP(L),BELV(L),
     $              ZBR(L)
c       WRITE(1,339)I,J,DXTMP,DYTMP,H(I,J),BELVIJ(I,J),
c    $              ZBRIJ(I,J)
      END IF
      END DO
      END DO
      CLOSE(1)
C
C**********************************************************************C
C
C **  READ IN INITIAL SALINITY, TEMPERATURE, DYE, SED, SND, TOX
C **  FOR COLD STARTS FORM FILE XXXX.inp
C
C----------------------------------------------------------------------C
C
C **  SALINITY
C
      DO K=1,KC
      DO L=2,LA
       SALINIT(L,K)=0.
      END DO
      END DO
C
      IF (ISRESTI.EQ.0.AND.ISTRAN(1).GE.1.AND.ifed_inc.GE.0) THEN
      IF (ISLTMT.EQ.0.AND.ISTOPT(1).GE.1) THEN
        OPEN(1,FILE='salt.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,4
         READ(1,1)
        END DO
        READ(1,*)ISALTYP
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (SALINIT(L,K),K=1,KC)
           IF(ISO.GT.0) GO TO 840
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,
     &       (SALINIT(L,K),K=1,KC)
           IF(ISO.GT.0) GO TO 840
          END DO
        END IF
        CLOSE(1)
      END IF
      END IF
C
C**********************************************************************C
C
C **  TEMPERATURE
C
      DO K=1,KC
      DO L=2,LA
       TEMINIT(L,K)=TEMO
      END DO
      END DO
C
      IF (ISRESTI.EQ.0.AND.ISTRAN(2).GE.1.AND.ifed_inc.GE.0) THEN
      IF (ISLTMT.EQ.0.AND.ISTOPT(2).EQ.1) THEN
        OPEN(1,FILE='temp.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,4
         READ(1,1)
        END DO
        READ(1,*)ISALTYP
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
          READ(1,*,IOSTAT=ISO) (TEMINIT(L,K),K=1,KC)
          IF(ISO.GT.0) GO TO 842
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(TEMINIT(L,K),K=1,KC)
           IF(ISO.GT.0) GO TO 842
          END DO
        END IF
        CLOSE(1)
      END IF
      END IF
C
C**********************************************************************C
C
C **  DYE
C
      DO K=1,KC
      DO L=2,LA
       DYEINIT(L,K)=0.
      END DO
      END DO
C
      IF (ISRESTI.EQ.0.AND.ISTRAN(3).GE.1) THEN
      IF (ISLTMT.EQ.0.AND.ISTOPT(3).GE.1) THEN
        OPEN(1,FILE='dye.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,4
        READ(1,1)
        END DO
        READ(1,*)ISALTYP
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (DYEINIT(L,K),K=1,KC)
           IF(ISO.GT.0) GO TO 844
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(DYEINIT(L,K),K=1,KC)
           IF(ISO.GT.0) GO TO 844
          END DO
        END IF
        CLOSE(1)
      END IF
      END IF
C
C**********************************************************************C
C
C **  SFL
C
      DO K=1,KC
      DO L=2,LA
       SFLINIT(L,K)=0.
      END DO
      END DO
C
      IF (ISRESTI.EQ.0.AND.ISTRAN(4).GE.1) THEN
      IF (ISLTMT.EQ.0.AND.ISTOPT(4).GE.1) THEN
        OPEN(1,FILE='sfl.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,4
        READ(1,1)
        END DO
        READ(1,*)ISALTYP
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (SFLINIT(L,K),K=1,KC)
           IF(ISO.GT.0) GO TO 846
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(SFLINIT(L,K),K=1,KC)
           IF(ISO.GT.0) GO TO 846
          END DO
        END IF
        CLOSE(1)
      END IF
      END IF
C
C**********************************************************************C
C
C **  TOXICS
C
      DO NT=1,NTOX1
      DO K=1,KC
      DO L=2,LA
       TOXINIT(L,K,NT)=TOXINTW(NT)
      END DO
      END DO
      END DO
C
      KB1=max(KBP,KB)
      DO NT=1,NTOX1
      DO K=1,KB1
      DO L=2,LA
       TOXBINIT(L,K,NT)=TOXINTB(NT)
      END DO
      END DO
      END DO
C
      IF(NPCB.GT.0)NTOX=NTOX1
      IISTMP=1
      IF(ISRESTI.EQ.0) IISTMP=0
      IF(ISRESTI.GE.1.AND.ISCI(5).EQ.0) IISTMP=0
c
      IF (IISTMP.EQ.0.AND.ISTRAN(5).GE.1) THEN
      IF (ISLTMT.EQ.0) THEN
        OPEN(1,FILE='toxw.inp',STATUS='UNKNOWN')
        IF(ITXINT(1).EQ.1.OR.ITXINT(1).EQ.3) THEN
c        IF(ITXINT(NT).EQ.1.OR.ITXINT(NT).EQ.3) THEN
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,18
        READ(1,1)
        END DO
        DO NT=1,NTOX
        READ(1,*)ISALTYP,ITOXWU(NT)
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (TOXINIT(L,K,NT),K=1,KC)
           IF(ISO.GT.0) GO TO 848
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(TOXINIT(L,K,NT),K=1,KC)
           IF(ISO.GT.0) GO TO 848
          END DO
        END IF
        END DO
        END IF
        CLOSE(1)
      END IF
      END IF
C
      IISTMP=1
      IF(ISRESTI.EQ.0) IISTMP=0
      IF(ISRESTI.GE.1.AND.ISCI(5).EQ.0) IISTMP=0
c
      IF (IISTMP.EQ.0.AND.ISTRAN(5).GE.1) THEN
      IF (ISLTMT.EQ.0.) THEN
        OPEN(1,FILE='toxb.inp',STATUS='UNKNOWN')
        IF(ITXINT(1).EQ.2.OR.ITXINT(1).EQ.3) THEN
c        IF(ITXINT(NT).EQ.2.OR.ITXINT(NT).EQ.3) THEN
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,18
        READ(1,1)
        END DO
        DO NT=1,NTOX
        READ(1,*)ISALTYP,ITOXBU(NT)
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (TOXBINIT(L,K,NT),K=1,KB)
           IF(ISO.GT.0) GO TO 852
           do k=1,KB
            TOXBINIT(L,K,NT)=TOXBINIT(L,K,NT)*(1.0-RDSED/100.)
           enddo           
          END DO
         ELSE
          DO L=2,LA
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(TOXBINIT(L,K,NT),K=1,KB)
           IF(ISO.GT.0) GO TO 852
           do k=1,KB
            TOXBINIT(L,K,NT)=TOXBINIT(L,K,NT)*(1.0-RDSED/100.)
           enddo
!           write(*,*)LDUM
          END DO
        END IF
        END DO
        END IF
        CLOSE(1)
      END IF
      END IF
C
C**********************************************************************C
C
C **  COHESIVE SEDIMENT
C
      DO NS=1,NSED
      DO K=1,KC
      DO L=2,LA
       SEDINIT(L,K,NS)=SEDO(NS)
      END DO
      END DO
      END DO
C
      DO NS=1,NSED
      DO K=1,KB
      DO L=2,LA
       SEDBINIT(L,K,NS)=SEDBO(NS)
      END DO
      END DO
      END DO
C
      ITXINTT=0
      IF(ISEDINT.EQ.1) ITXINTT=1
      IF(ISEDINT.EQ.3) ITXINTT=1
C
      IISTMP=1
      IF(ISRESTI.EQ.0) IISTMP=0
      IF(ISRESTI.GE.1.AND.ISCI(6).EQ.0) IISTMP=0
c
      IF (IISTMP.EQ.0.AND.ISTRAN(6).GE.1) THEN
      IF (ISLTMT.EQ.0.AND.ITXINTT.GE.1) THEN
        OPEN(1,FILE='sedw.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,4
        READ(1,1)
        END DO
        DO NS=1,NSED
        READ(1,*)ISALTYP
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (SEDINIT(L,K,NS),K=1,KC)
           IF(ISO.GT.0) GO TO 854
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(SEDINIT(L,K,NS),K=1,KC)
c	write(369,819) L,L2I(L),L2J(L),(sedinit(L,K,NS),K=1,KC)
819	format(3i8,999e14.6)
           IF(ISO.GT.0) GO TO 854
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
      END IF
C
      ITXINTT=0
      IF(ISEDINT.EQ.2) ITXINTT=1
      IF(ISEDINT.EQ.3) ITXINTT=1
C
      IISTMP=1
      IF(ISRESTI.EQ.0) IISTMP=0
      IF(ISRESTI.GE.1.AND.ISCI(6).EQ.0) IISTMP=0
c
      IF (IISTMP.EQ.0.AND.ISTRAN(6).GE.1) THEN
      IF (ISLTMT.EQ.0.AND.ITXINTT.GE.1) THEN
        OPEN(1,FILE='sedb.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,4
        READ(1,1)
        END DO
        DO NS=1,NSED
        READ(1,*)ISALTYP,ISEDBU(NS)  !bug in sedb.inp, ISEDBU(NS) have no value?, Ji, 9/12/00
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (SEDBINIT(L,K,NS),K=1,KB)
           IF(ISO.GT.0) GO TO 856
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,
     $                          (SEDBINIT(L,K,NS),K=1,KB)
c		write(364,814) L,(sedbinit(L,K,ns),k=1,kb)
814	format(i8,999e14.6)
           IF(ISO.GT.0) GO TO 856
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
      END IF
C
C**********************************************************************C
C
C **  NON-COHESIVE SEDIMENT
C
      DO NX=1,NSND
      NS=NX+NSED
      DO K=1,KC
      DO L=2,LA
       SNDINIT(L,K,NX)=SEDO(NS)
      END DO
      END DO
      END DO
C
      DO NX=1,NSND
      NS=NX+NSED
      DO K=1,KB
      DO L=2,LA
       SNDBINIT(L,K,NX)=SEDBO(NS)
      END DO
      END DO
      END DO
C
      ITXINTT=0
      IF(ISEDINT.EQ.1) ITXINTT=1
      IF(ISEDINT.EQ.3) ITXINTT=1
C
      IISTMP=1
      IF(ISRESTI.EQ.0) IISTMP=0
      IF(ISRESTI.GE.1.AND.ISCI(7).EQ.0) IISTMP=0
c
      IF (IISTMP.EQ.0.AND.ISTRAN(7).GE.1) THEN
      IF (ISLTMT.EQ.0.AND.ITXINTT.GE.1) THEN
        OPEN(1,FILE='sndw.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,4
        READ(1,1)
        END DO
        DO NX=1,NSND
        READ(1,*)ISALTYP
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (SNDINIT(L,K,NX),K=1,KC)
           IF(ISO.GT.0) GO TO 858
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(SNDINIT(L,K,NX),K=1,KC)
           IF(ISO.GT.0) GO TO 858
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
      END IF
C
      ITXINTT=0
      IF(ISEDINT.EQ.2) ITXINTT=1
      IF(ISEDINT.EQ.3) ITXINTT=1
C
      IISTMP=1
      IF(ISRESTI.EQ.0) IISTMP=0
      IF(ISRESTI.GE.1.AND.ISCI(7).EQ.0) IISTMP=0
c
      IF (IISTMP.EQ.0.AND.ISTRAN(7).GE.1) THEN
      IF (ISLTMT.EQ.0.AND.ITXINTT.GE.1) THEN
        OPEN(1,FILE='sndb.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,4
        READ(1,1)
        END DO
        DO NX=1,NSND
        READ(1,*)ISALTYP,ISNDBU(NX)
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (SNDBINIT(L,K,NX),K=1,KB)
           IF(ISO.GT.0) GO TO 862
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(SNDBINIT(L,K,NX),K=1,KB)
           IF(ISO.GT.0) GO TO 862
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
      END IF
C
C**********************************************************************C
C
c  ** SEDIMENT BED MECHANICAL INITIAL CONDITIONS
c
c  ** BED LAYER THICKNESS
C
      IF(ISRESTI.EQ.0.AND.IBMECH.GE.1) THEN
        OPEN(1,FILE='bedlay.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,18
        READ(1,1)
        END DO
        READ(1,*)ISALTYP,IBEDLAYU
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (BEDLINIT(L,K),K=1,KB)
           IF(ISO.GT.0) GO TO 862
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(BEDLINIT(L,K),K=1,KB)
           IF(ISO.GT.0) GO TO 862
          END DO
        END IF
        CLOSE(1)
      END IF
c
c  ** BED LAYER BULK DENSITY
C
      IF(ISRESTI.EQ.0.AND.IBMECH.GE.1) THEN
        OPEN(1,FILE='bedbdn.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,18
        READ(1,1)
        END DO
        READ(1,*)ISALTYP,IBEDBDNU
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (BEDBINIT(L,K),K=1,KB)
           IF(ISO.GT.0) GO TO 862
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(BEDBINIT(L,K),K=1,KB)
           IF(ISO.GT.0) GO TO 862
          END DO
        END IF
        CLOSE(1)
      END IF
c
c  ** BED LAYER DRY DENSITY, POROSITY OR VOID RATIO
C
      IF(ISRESTI.EQ.0.AND.IBMECH.GE.1) THEN
        OPEN(1,FILE='bedddn.inp',STATUS='UNKNOWN')
C **    SKIP OVER TITLE AND AND HEADER LINES
        DO IS=1,18
        READ(1,1)
        END DO
        READ(1,*)ISALTYP,IBEDDDNU
        IF(ISALTYP.EQ.0) THEN
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO) (BEDDINIT(L,K),K=1,KB)
           IF(ISO.GT.0) GO TO 862
          END DO
         ELSE
          DO L=2,LC-1
           READ(1,*,IOSTAT=ISO)LDUM,IDUM,JDUM,(BEDDINIT(L,K),K=1,KB)
           IF(ISO.GT.0) GO TO 862
          END DO
        END IF
        CLOSE(1)
      END IF
C
C**********************************************************************C
C
   19 FORMAT (1H1,' INITIAL BUOYANCY ARRAY:',//)
  907 FORMAT(12F6.2)
C
C**********************************************************************C
C
C **  READ IN OPEN BOUNDARY SURFACE ELEVATION TIME SERIES FROM THE
C **  FILE pser.inp
C
C----------------------------------------------------------------------C
C
	 write(iyear,'(I4)')iyear1
      IF (NPSER.GE.1.AND.ifed_inc.GE.0) THEN
      if(ilong.eq.0) then
	  OPEN(1,FILE='pser.inp',STATUS='UNKNOWN')
	else
        OPEN(1,FILE='pser_'//iyear//'.inp',STATUS='UNKNOWN')  ! pser.inp
	endif
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,6
      READ(1,1)
      END DO
C
        DO NS=1,NPSER
        READ(1,*,IOSTAT=ISO) MPSER(NS),TCPSER(NS),TAPSER(NS),
     $                   RMULADJ,ADDADJ
        IF(ISO.GT.0) GO TO 850
         DO M=1,MPSER(NS)
         READ(1,*,IOSTAT=ISO)TPSER(M,NS),PSERTMP
        IF(ISO.GT.0) GO TO 850
         TPSER(M,NS)=TPSER(M,NS)+TAPSER(NS)+tplus
         PSER(M,NS)=G*(PSERTMP+ADDADJ)*RMULADJ
         END DO
        write(*,*)'Complete qser ',MPSER(NS)         
        END DO

        CLOSE(1)
      END IF
c
cdia      WRITE(6,6776)'read pser.inp'
c
 6776 format(a20)
C
C**********************************************************************C
C
C **  READ IN VOLUMETRIC SOURCE OR RIVER INFLOW TIME SERIES FROM THE
C **  FILE qser.inp
C
C----------------------------------------------------------------------C
C
 !     IF(NQSER.GE.1.AND.ifed_inc.GE.0) THEN
      IF(NQSER.GE.1) THEN
 !     if(ilong.eq.0) then
	OPEN(1,FILE='qser.inp',STATUS='UNKNOWN')
 !     else
 !	OPEN(1,FILE='qser_'//iyear//'.inp',STATUS='UNKNOWN') 
 !	endif

C      OPEN(2,FILE='qser.ck',STATUS='UNKNOWN')
C      CLOSE(2,STATUS='DELETE')
C      OPEN(2,FILE='qser.ck',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
        DO IS=1,15
        READ(1,1)
        END DO
C
        DO NS=1,NQSER
C        NTMP=0
        READ(1,*,IOSTAT=ISO)ISTYP, MQSER(NS),TCQSER(NS),TAQSER(NS),
     $                   RMULADJ,ADDADJ,ICHGQS
c added to ensure qser.inp is Ok., Jeff Ji, 21/1/01
      if(istyp.ne.1) go to 860  ! to avoid misreading caused by wrong MQSER(NS)
c
        flowmean=0.0
        IF(ISO.GT.0) GO TO 860
        IF(ISTYP.EQ.1) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
	  ELSEIF(ISTYP.EQ.2) THEN
	    READ(1,*)
	    DO K=1,KC
	     WKQ(K)=0.0
	   ENDDO
	     WKQ(KC)=1.0
        ENDIF
	  IF(ISTYP.GT.0) THEN
           DO M=1,MQSER(NS)
           READ(1,*,IOSTAT=ISO)TQSER(M,NS),QSERTMP
           IF(ISO.GT.0) GO TO 860
           TQSER(M,NS)=TQSER(M,NS)+TAQSER(NS)
           QSERTMP=(RMULADJ*(QSERTMP+ADDADJ))
           flowmean=flowmean+QSERTMP
           IF (ICHGQS.EQ.1) QSERTMP=MAX(QSERTMP,0.0)
           IF (ICHGQS.EQ.-1) QSERTMP=MIN(QSERTMP,0.0)
            DO K=1,KC
            QSER(M,K,NS)=QSERTMP*WKQ(K)
            END DO
           END DO
           write(500,*)'Flow ', NS,flowmean/MQSER(NS)
         ELSE
          DO M=1,MQSER(NS)
          READ(1,*,IOSTAT=ISO)TQSER(M,NS),(QSER(M,K,NS), K=1,KC)
          IF(ISO.GT.0) GO TO 860
          TQSER(M,NS)=TQSER(M,NS)+TAQSER(NS)
           DO K=1,KC
           QSER(M,K,NS)=RMULADJ*(QSER(M,K,NS)+ADDADJ)
           IF (ICHGQS.EQ.1) QSER(M,K,NS)=MAX(QSER(M,K,NS),0.0)
           IF (ICHGQS.EQ.-1) QSER(M,K,NS)=MIN(QSER(M,K,NS),0.0)
           END DO
          END DO
        END IF
        END DO
C
      CLOSE(1)
      close(500)
C      CLOSE(2)
      END IF
C
 2222 FORMAT(2I5,F12.7,F12.4)
c
c      do i=1,100
c      write(991,*)QSER(i,8,8)
c      enddo
cdia      WRITE(6,6776)'read qser.inp'
c
C**********************************************************************C
C
C **  READ IN FLOW WITHDRAWL-RETURN FLOW AND CONCENTRATION RISE
C **  TIME SERIES FROM THE FILE qwrs.inp
C
C----------------------------------------------------------------------C
C
      IF(NQWRSR.GE.1) THEN
      OPEN(1,FILE='qwrs.inp',STATUS='UNKNOWN')
C      OPEN(2,FILE='qser.ck',STATUS='UNKNOWN')
C      CLOSE(2,STATUS='DELETE')
C      OPEN(2,FILE='qser.ck',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
        NCTMP=4+NSED+NSND+NTOX1
C
        DO IS=1,16
        READ(1,1)
        END DO
C
        DO NS=1,NQWRSR
C        NTMP=0
        READ(1,*,IOSTAT=ISO)ISTYP,MQWRSR(NS),TCQWRSR(NS),TAQWRSR(NS),
     $                   RMULADJ,ADDADJ
        IF(ISO.GT.0) GO TO 865
        IF(ISTYP.EQ.0) THEN
          DO NC=1,NCTMP
           DO M=1,MQWRSR(NS)
            CQWRSER(M,NS,NC)=0.
           END DO
          END DO
          DO M=1,MQWRSR(NS)
           READ(1,*,IOSTAT=ISO)TQWRSER(M,NS),QWRSER(M,NS)
           IF(ISO.GT.0) GO TO 865
           TQWRSER(M,NS)=TQWRSER(M,NS)+TAQWRSR(NS)
           QWRSER(M,NS)=(RMULADJ*(QWRSER(M,NS)+ADDADJ))
          END DO
         ELSE
          DO M=1,MQWRSR(NS)
           READ(1,*,IOSTAT=ISO)TQWRSER(M,NS),QWRSER(M,NS),
     $                  (CQWRSER(M,NS,NC),NC=1,NCTMP)
           IF(ISO.GT.0) GO TO 865
           TQWRSER(M,NS)=TQWRSER(M,NS)+TAQWRSR(NS)
           QWRSER(M,NS)=(RMULADJ*(QWRSER(M,NS)+ADDADJ))
          END DO
        END IF
        END DO
C
      CLOSE(1)
C
      END IF
C
c
cdia      WRITE(6,6776)'read qwrs.inp'
c
C**********************************************************************C
C
C **  READ IN OPEN BOUNDARY OR VOLUMETRIC SOURCE SALINITY TIME SERIES
C **  FROM THE FILE sser.inp
C
C----------------------------------------------------------------------C
C
      IF(NCSER(1).GE.1.AND.ifed_inc.GE.0) THEN
       if(ilong.eq.0)then
	  OPEN(1,FILE='sser.inp',STATUS='UNKNOWN')
	 else
        OPEN(1,FILE='sser_'//iyear//'.inp',STATUS='UNKNOWN')
       endif
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,15
      READ(1,1)
      END DO
C
        NC=1
        DO NS=1,NCSER(NC)
        READ(1,*,IOSTAT=ISO)ISTYP,MCSER(NS,NC),TCCSER(NS,NC),
     $                   TACSER(NS,NC),RMULADJ,ADDADJ
        IF(ISO.GT.0) GO TO 870
        IF(ISTYP.EQ.1) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          IF(ISO.GT.0) GO TO 870
           DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),CSERTMP
           IF(ISO.GT.0) GO TO 870
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)+tplus
            DO K=1,KC
            CSER(M,K,NS,NC)=(RMULADJ*(CSERTMP+ADDADJ))*WKQ(K)
            END DO
           END DO
         ELSE
         if(ISTYP.EQ.0) THEN
          DO M=1,MCSER(NS,NC)
          READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),(CSER(M,K,NS,NC), K=1,KC)
          IF(ISO.GT.0) GO TO 870
          TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)+tplus
           DO K=1,KC
           CSER(M,K,NS,NC)=RMULADJ*(CSER(M,K,NS,NC)+ADDADJ)
           END DO
          END DO
         elseif(ISTYP.EQ.3) then
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          DO M=1,MCSER(NS,NC)
          READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),(CSER(M,K,NS,NC), K=1,KC)
          IF(ISO.GT.0) GO TO 870
          TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
           DO K=1,KC
           CSER(M,K,NS,NC)=RMULADJ*(CSER(M,K,NS,NC)+ADDADJ)*WKQ(K)
           END DO
          END DO
         endif
        END IF
        END DO
        CLOSE(1)
      END IF
C
C**********************************************************************C
C
C **  READ IN OPEN BOUNDARY OR VOLUMETRIC SOURCE TEMPERATURE TIME
C **  SERIES FROM THE FILE tser.inp
C
C----------------------------------------------------------------------C
C
      IF(NCSER(2).GE.1.AND.ifed_inc.GE.0) THEN
       if(ilong.eq.0)then
	  OPEN(1,FILE='tser.inp',STATUS='UNKNOWN')
       else
        OPEN(1,FILE='tser_'//iyear//'.inp',STATUS='UNKNOWN')
       endif
C  
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,15
      READ(1,1)
      END DO
C
        NC=2
        DO NS=1,NCSER(NC)
        READ(1,*,IOSTAT=ISO)ISTYP,MCSER(NS,NC),TCCSER(NS,NC),
     $                   TACSER(NS,NC),RMULADJ,ADDADJ
        IF(ISO.GT.0) GO TO 880
        IF(ISTYP.EQ.1) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          IF(ISO.GT.0) GO TO 880
           DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),CSERTMP
           IF(ISO.GT.0) GO TO 880
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)+tplus
            DO K=1,KC
            CSER(M,K,NS,NC)=(RMULADJ*(CSERTMP+ADDADJ))*WKQ(K)
            END DO
           END DO
         ELSE
          DO M=1,MCSER(NS,NC)
          READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),(CSER(M,K,NS,NC), K=1,KC)
          IF(ISO.GT.0) GO TO 880
          TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)+tplus
           DO K=1,KC
           CSER(M,K,NS,NC)=RMULADJ*(CSER(M,K,NS,NC)+ADDADJ)
           END DO
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
C
C**********************************************************************C
C
C **  READ IN OPEN BOUNDARY OR VOLUMETRIC SOURCE DYE CONCENTRATION
C **  TIME SERIES FROM THE FILE dser.inp
C
C----------------------------------------------------------------------C
C
      IF(NCSER(3).GE.1) THEN
        OPEN(1,FILE='dser.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,15
      READ(1,1)
      END DO
C
        NC=3
        DO NS=1,NCSER(NC)
        READ(1,*,IOSTAT=ISO)ISTYP,MCSER(NS,NC),TCCSER(NS,NC),
     $                   TACSER(NS,NC),RMULADJ,ADDADJ,dmax
        IF(ISO.GT.0) GO TO 890
        IF(ISTYP.EQ.1) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          IF(ISO.GT.0) GO TO 890
           DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),CSERTMP
           IF(ISO.GT.0) GO TO 890
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
            DO K=1,KC
            CSER(M,K,NS,NC)=(RMULADJ*(CSERTMP+ADDADJ))*WKQ(K)
             if(CSER(M,K,NS,NC).GT.dmax)CSER(M,K,NS,NC)=dmax
            END DO
           END DO
         ELSE 
          DO M=1,MCSER(NS,NC)
          READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),(CSER(M,K,NS,NC), K=1,KC)
          IF(ISO.GT.0) GO TO 890
          TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
           DO K=1,KC
           CSER(M,K,NS,NC)=RMULADJ*(CSER(M,K,NS,NC)+ADDADJ)
           if(CSER(M,K,NS,NC).GT.dmax)CSER(M,K,NS,NC)=dmax
           END DO
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
C
C**********************************************************************C
C
C **  READ IN OPEN BOUNDARY OR VOLUMETRIC SOURCE COHESIVE SEDIMENT
C **  CONCENTRATION TIME SERIES FROM THE FILE sdser.inp
C
C----------------------------------------------------------------------C
C
      NFSED=MSVSED(1)
      IF(NCSER(NFSED).GE.1.AND.ifed_inc.GE.0) THEN
        OPEN(1,FILE='sdser.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,15
      READ(1,1)
      END DO
C
        NC=MSVSED(1)
        DO NS=1,NCSER(NC)
        READ(1,*,IOSTAT=ISO)ISTYP,MCSER(NS,NC),TCCSER(NS,NC),
     $                   TACSER(NS,NC),RMULADS(1),ADDADS(1)
        IF(ISO.GT.0) GO TO 900
        IF(NSED.GT.1) THEN
          DO NT=2,NSED
           READ(1,*,IOSTAT=ISO)RMULADS(NT),ADDADS(NT)
           IF(ISO.GT.0) GO TO 900
           NTT=NT-1
           MCSER(NS,NC+NTT)=MCSER(NS,NC)
           TCCSER(NS,NC+NTT)=TCCSER(NS,NC)
           TACSER(NS,NC+NTT)=TACSER(NS,NC)
          END DO
        END IF
        IF(ISTYP.EQ.1) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          IF(ISO.GT.0) GO TO 900
          DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),CSERTMP
           IF(ISO.GT.0) GO TO 900
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
           DO K=1,KC
             CSER(M,K,NS,NC)=(RMULADS(1)*(CSERTMP+ADDADS(1)))*WKQ(K)
           END DO
           DO NT=2,NSED
            NTT=NT-1
            TCSER(M,NS,NC+NTT)=TCSER(M,NS,NC)
            READ(1,*,IOSTAT=ISO)CSERTMP
            IF(ISO.GT.0) GO TO 900
            DO K=1,KC
              CSER(M,K,NS,NC+NTT)
     $                      =(RMULADS(NT)*(CSERTMP+ADDADS(NT)))*WKQ(K)
            END DO
           END DO
          END DO
         ELSE
          DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),(CSER(M,K,NS,NC), K=1,KC)
           IF(ISO.GT.0) GO TO 900
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
           DO K=1,KC
            CSER(M,K,NS,NC)=RMULADS(1)*(CSER(M,K,NS,NC)+ADDADS(1))
           END DO
           DO NT=2,NSED
            NTT=NT-1
            TCSER(M,NS,NC+NTT)=TCSER(M,NS,NC)
            READ(1,*,IOSTAT=ISO)(CSER(M,K,NS,NC+NTT), K=1,KC)
            IF(ISO.GT.0) GO TO 900
            DO K=1,KC
             CSER(M,K,NS,NC+NTT)
     $                   =RMULADS(NT)*(CSER(M,K,NS,NC+NTT)+ADDADS(NT))
            END DO
           END DO
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
C
C **  CHECK SEDIMENT SERIES
C
C        OPEN(2,file='sedck.out')
C        CLOSE(2,STATUS='DELETE')
C        OPEN(2,file='sedck.out')
C        DO NC=MSVSED(1),MSVSED(NSED)
C         DO NS=1,NCSER(NC)
C          DO M=1,MCSER(NS,NC)
C	    WRITE(2,2001)NC,NS,M,TCSER(M,NS,NC),CSER(M,1,NS,NC)
C          END DO
C         END DO
C        END DO
C	CLOSE(2)
C
C**********************************************************************C
C
C **  READ IN OPEN BOUNDARY OR VOLUMETRIC SOURCE NONCOHESIVE SEDIMENT
C **  CONCENTRATION TIME SERIES FROM THE FILE snser.inp
C
C----------------------------------------------------------------------C
C
      NFSND=MSVSND(1)
      IF(NCSER(NFSND).GE.1.AND.ifed_inc.GE.0) THEN
        OPEN(1,FILE='snser.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,15
      READ(1,1)
      END DO
C
        NC=MSVSND(1)
        DO NS=1,NCSER(NC)
        READ(1,*,IOSTAT=ISO)ISTYP,MCSER(NS,NC),TCCSER(NS,NC),
     $                   TACSER(NS,NC),RMULADS(1),ADDADS(1)
        IF(ISO.GT.0) GO TO 902
        IF(NSND.GT.1) THEN
          DO NT=2,NSND
           READ(1,*,IOSTAT=ISO)RMULADS(NT),ADDADS(NT)
           IF(ISO.GT.0) GO TO 902
           NTT=NT-1
           MCSER(NS,NC+NTT)=MCSER(NS,NC)
           TCCSER(NS,NC+NTT)=TCCSER(NS,NC)
           TACSER(NS,NC+NTT)=TACSER(NS,NC)
          END DO
        END IF
        IF(ISTYP.EQ.1) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          IF(ISO.GT.0) GO TO 902
          DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),CSERTMP
           IF(ISO.GT.0) GO TO 902
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
           DO K=1,KC
             CSER(M,K,NS,NC)=(RMULADS(1)*(CSERTMP+ADDADS(1)))*WKQ(K)
           END DO
           DO NT=2,NSND
            NTT=NT-1
            TCSER(M,NS,NC+NTT)=TCSER(M,NS,NC)
            READ(1,*,IOSTAT=ISO)CSERTMP
            IF(ISO.GT.0) GO TO 902
            DO K=1,KC
              CSER(M,K,NS,NC+NTT)
     $                     =(RMULADS(NT)*(CSERTMP+ADDADS(NT)))*WKQ(K)
            END DO
           END DO
          END DO
         ELSE
          DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),(CSER(M,K,NS,NC), K=1,KC)
           IF(ISO.GT.0) GO TO 902
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
           DO K=1,KC
            CSER(M,K,NS,NC)=RMULADS(1)*(CSER(M,K,NS,NC)+ADDADS(1))
           END DO
           DO NT=2,NSND
            NTT=NT-1
            TCSER(M,NS,NC+NTT)=TCSER(M,NS,NC)
            READ(1,*,IOSTAT=ISO)(CSER(M,K,NS,NC+NTT), K=1,KC)
            IF(ISO.GT.0) GO TO 902
            DO K=1,KC
             CSER(M,K,NS,NC+NTT)
     $                  =RMULADS(NT)*(CSER(M,K,NS,NC+NTT)+ADDADS(NT))
            END DO
           END DO
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
C
C **  CHECK SEDIMENT SERIES
C
C        OPEN(2,file='sndck.out')
C        CLOSE(2,STATUS='DELETE')
C        OPEN(2,file='sndck.out')
C        DO NC=MSVSND(1),MSVSED(NSND)
C         DO NS=1,NCSER(NC)
C          DO M=1,MCSER(NS,NC)
C	    WRITE(2,2001)NC,NS,M,TCSER(M,NS,NC),CSER(M,1,NS,NC)
C          END DO
C         END DO
C        END DO
C	CLOSE(2)
C
 2001 FORMAT(3I5,2F12.5)
C
C**********************************************************************C
C
C **  READ IN OPEN BOUNDARY OR VOLUMETRIC SOURCE TOXIC CONTAMINANT
C **  CONCENTRATION TIME SERIES FROM THE FILE txser.inp
C
C----------------------------------------------------------------------C
C
      NFTOX=MSVTOX(1)
      IF(NFTOX.GT.0.and. NCSER(5).GE.1)THEN
!      IF(NCSER(NFTOX).GE.1) THEN
        OPEN(1,FILE='txser.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,15
      READ(1,1)
      END DO
C
        NC=MSVTOX(1)
        DO NS=1,NCSER(NC)
        READ(1,*,IOSTAT=ISO)ISTYP,MCSER(NS,NC),TCCSER(NS,NC),
     $                   TACSER(NS,NC),RMULADJ,ADDADJ
        IF(ISO.GT.0) GO TO 904
        DO NT=2,NTOX1
         NTT=NT-1
         MCSER(NS,NC+NTT)=MCSER(NS,NC)
         TCCSER(NS,NC+NTT)=TCCSER(NS,NC)
         TACSER(NS,NC+NTT)=TACSER(NS,NC)
        END DO
        IF(ISTYP.EQ.1) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          IF(ISO.GT.0) GO TO 904
          DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),CSERTMP
           IF(ISO.GT.0) GO TO 904
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
           DO K=1,KC
             CSER(M,K,NS,NC)=(RMULADJ*(CSERTMP+ADDADJ))*WKQ(K)
           END DO
           DO NT=2,NTOX1
            NTT=NT-1
            TCSER(M,NS,NC+NTT)=TCSER(M,NS,NC)
            READ(1,*,IOSTAT=ISO)CSERTMP
            IF(ISO.GT.0) GO TO 904
            DO K=1,KC
              CSER(M,K,NS,NC+NTT)=(RMULADJ*(CSERTMP+ADDADJ))*WKQ(K)
            END DO
           END DO
          END DO
         ELSE
          DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),(CSER(M,K,NS,NC), K=1,KC)
           IF(ISO.GT.0) GO TO 904
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
           DO K=1,KC
            CSER(M,K,NS,NC)=RMULADJ*(CSER(M,K,NS,NC)+ADDADJ)
           END DO
        
           DO NT=2,NTOX1
            NTT=NT-1
            TCSER(M,NS,NC+NTT)=TCSER(M,NS,NC)
            READ(1,*,IOSTAT=ISO)(CSER(M,K,NS,NC+NTT), K=1,KC)
  !          do k=1,kc                                            test transport using salinity BC
  !          CSER(M,K,NS,NC+NTT)=CSER(M,K,NS,NC)
  !          enddo
            IF(ISO.GT.0) GO TO 904
            DO K=1,KC
             CSER(M,K,NS,NC+NTT)=RMULADJ*(CSER(M,K,NS,NC+NTT)+ADDADJ)
            END DO
           END DO
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
C
C**********************************************************************C
C
C **  READ IN OPEN BOUNDARY OR VOLUMETRIC SOURCE SHELL FISH LARVAE
C **  TIME SERIES FROM THE FILE sfser.inp
C
C----------------------------------------------------------------------C
C
      IF(NCSER(4).GE.1) THEN
        OPEN(1,FILE='sfser.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,15
      READ(1,1)
      END DO
C
        NC=7
        DO NS=1,NCSER(NC)
        READ(1,*,IOSTAT=ISO)ISTYP,MCSER(NS,NC),TCCSER(NS,NC),
     $                   TACSER(NS,NC),RMULADJ,ADDADJ
        IF(ISO.GT.0) GO TO 910
        IF(ISTYP.EQ.1) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          IF(ISO.GT.0) GO TO 910
           DO M=1,MCSER(NS,NC)
           READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),CSERTMP
           IF(ISO.GT.0) GO TO 910
           TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
            DO K=1,KC
            CSER(M,K,NS,NC)=(RMULADJ*(CSERTMP+ADDADJ))*WKQ(K)
            END DO
           END DO
         ELSE
          DO M=1,MCSER(NS,NC)
          READ(1,*,IOSTAT=ISO)TCSER(M,NS,NC),(CSER(M,K,NS,NC), K=1,KC)
          IF(ISO.GT.0) GO TO 910
          TCSER(M,NS,NC)=TCSER(M,NS,NC)+TACSER(NS,NC)
           DO K=1,KC
            CSER(M,K,NS,NC)=RMULADJ*(CSER(M,K,NS,NC)+ADDADJ)
           END DO
          END DO
        END IF
        END DO
        CLOSE(1)
      END IF
C
C**********************************************************************C
C
C **  READ IN FREE SURFACE ELEVATION OR PRESSURE CONTROLLED FLOW
C **  SPECIFICATION FROM THE FILE qctl.inp
C
C **  THE FLOW IS GIVEN BY:
C
C     HUP=HP(L)+BELV(L)+HCTLUA(NS)=ADJUSTED ELEVATION OF UPSTREAM CELL
C         FREE SURFACE
C
C     HDW=HP(L)+BELV(L)+HCTLDA(NS)=ADJUSTED ELEVATION OF DOWNSTREAM CELL
C         FREE SURFACE
C
C     DELH=HCTLUM(NS)*HUP-HCTLDM(NS)*HDW
C
C     IF (DELH.LE.0) THEN
C        FLOW=0
C      ELSE
C        ENTER QCTL(M,K,NS) VS HDIFCTL(M,NS) TABLE WITH DELH TO GIVE
C        FLOW=QCTL(M,K,NS)
C     END IF
C
C----------------------------------------------------------------------C
C
      IF(NQCTL.GE.1) THEN
        OPEN(1,FILE='qctl.inp',STATUS='UNKNOWN')
        OPEN(99,FILE='qctlck.inp',STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE='qctlck.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
        DO IS=1,14
        READ(1,1)
        END DO
C
        DO NS=1,NQCTLT
        READ(1,*, IOSTAT=ISO)ISTYP,MQCTL(NS),HCTLUA(NS),HCTLUM(NS),
     $              HCTLDA(NS),HCTLDM(NS),RMULADJ,ADDADJ,AQCTL(NS)
        WRITE(99,991)NS
        WRITE(99,992)ISTYP,MQCTL(NS),HCTLUA(NS),HCTLUM(NS),
     $              HCTLDA(NS),HCTLDM(NS),RMULADJ,ADDADJ,AQCTL(NS)
        IF(ISO.GT.0) GO TO 920
C
        IF(ISTYP.EQ.0) THEN
          DO M=1,MQCTL(NS)
           READ(1,*,IOSTAT=ISO) HDIFCTL(M,NS),(QCTL(M,1,K,NS),K=1,KC)
           IF(ISO.GT.0) GO TO 920
           DO K=1,KC
            QCTL(M,1,K,NS)=RMULADJ*(QCTL(M,1,K,NS)+ADDADJ)
           END DO
          END DO
        END IF
C
        IF(ISTYP.EQ.1) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          IF(ISO.GT.0) GO TO 920
          DO M=1,MQCTL(NS)
           READ(1,*,IOSTAT=ISO) HDIFCTL(M,NS),QCTLTMP
           IF(ISO.GT.0) GO TO 920
           DO K=1,KC
            QCTL(M,1,K,NS)=RMULADJ*(QCTLTMP+ADDADJ)*WKQ(K)
           END DO
          END DO
        END IF
C
        IF(ISTYP.EQ.2) THEN
          DO MD=1,MQCTL(NS)
          DO MU=1,MQCTL(NS)
           READ(1,*,IOSTAT=ISO) HDIFCTL(MU,NS),HDIFCTD(MD,NS),
     $                          (QCTL(MU,MD,K,NS),K=1,KC)
           IF(ISO.GT.0) GO TO 920
           DO K=1,KC
            QCTL(MU,MD,K,NS)=RMULADJ*(QCTL(MU,MD,K,NS)+ADDADJ)
           END DO
          END DO
          END DO
        END IF
C
        IF(ISTYP.EQ.3) THEN
          READ(1,*,IOSTAT=ISO) (WKQ(K),K=1,KC)
          IF(ISO.GT.0) GO TO 920
          DO MD=1,MQCTL(NS)
          DO MU=1,MQCTL(NS)
           READ(1,*,IOSTAT=ISO) HDIFCTL(MU,NS),HDIFCTD(MD,NS),QCTLTMP
           IF(ISO.GT.0) GO TO 920
           DO K=1,KC
            QCTL(MU,MD,K,NS)=RMULADJ*(QCTLTMP+ADDADJ)*WKQ(K)
           END DO
          END DO
          END DO
        END IF
C
        IF(ISTYP.LE.1) THEN
         DO M=1,MQCTL(NS)
          WRITE(99,993)M,HDIFCTL(M,NS),(QCTL(M,1,K,NS),K=1,KC)
         END DO
        END IF
        IF(ISTYP.GE.2) THEN
         DO MD=1,MQCTL(NS)
         DO MU=1,MQCTL(NS)
          WRITE(99,994)MU,MD,HDIFCTL(MU,NS),HDIFCTD(MD,NS),
     $                   (QCTL(MU,MD,K,NS),K=1,KC)
         END DO
         END DO
        END IF
C
        END DO
C
        CLOSE(1)
        CLOSE(99)
      END IF
C
  991 FORMAT(/,' CONTROL TABLE NS =',I5,/)
  992 FORMAT(2I5,7F10.4)
  993 FORMAT(I5,11F10.4)
  994 FORMAT(2I5,11F10.4)
 1001 FORMAT(/,' READ ERROR FROM FILE efdc.inp ON CARD ',I5/)
 1002 FORMAT(/,' INPUT ECHO NCARD = ',I5/)
C
C**********************************************************************C
C
C **  READ IN WITHDRAWAL, ADD HEAT OR MATERIAL, RETURN TIME SERIES
C **  FROM THE FILE qwrser.inp
C
C----------------------------------------------------------------------C
C
c     IF(NQCOOL.GE.1) THEN
c       OPEN(1,FILE='qcool.inp',STATUS='UNKNOWN')
c       DO NS=1,NQCOOL
c       READ(1,*,ERR=930)ISTYP,MQLSER(NS),TCQLSER(NS),TAQLSER(NS),
c    $                   RMULADJ,ADDADJ
c       IF(ISTYP.EQ.1) THEN
c         READ(1,*,ERR=930) (WKQ(K),K=1,KC)
c          DO M=1,MQLSER(NS)
c          READ(1,*,ERR=930)TQLSER(M,NS),QLSERTMP,TRISETMP
c          TQLSER(M,NS)=TQLSER(M,NS)+TAQLSER(NS)
c           DO K=1,KC
c           QLSER(M,K,NS)=RMULADJ*(CSERTMP+ADDADJ))*WKQ(K)
c            DO NC=1,5
c            CQLSER(M,K,NS,NC)=0.
c            END DO
c           CQLSER(M,K,NS,2)=TRISETMP
c           END DO
c          END DO
c        ELSE
c         DO M=1,MCSER(NS,NC)
c         READ(1,*,ERR=910)TQLSER(M,NS),TRISETMP,(QLSER(M,K,NS),K=1,KC)
c         TQLSER(M,NS)=TQLSER(M,NS)+TAQLSER(NS)
c          DO K=1,KC
c          QLSER(M,K,NS)=RMULADJ*(QLSER(M,K,NS)+ADDADJ)
c            DO NC=1,5
c            CQLSER(M,K,NS,NC)=0.
c            END DO
c          CQLSER(M,K,NS,2)=TRISETMP
c          END DO
c         END DO
c       END IF
c       END DO
c       CLOSE(1)
c     END IF
C
C**********************************************************************C
C
C **  READ IN ATMOSPHERIC AND WEATHER CONDITION TIME SERIES FROM THE
C **  FILE aser.inp
C
C----------------------------------------------------------------------C
C
C     INITIALIZE ATMOSPHERIC VARIABLES
C
      DO L=2,LA
       PATMT(L)=1000.
       TATMT(L)=0.
       RAINT(L)=0.
       EVAPT(L)=0.
       SOLSWRT(L)=0.
       CLOUDT(L)=0.
       SVPA(L)=0.
       RHA(L)=0.
       VPA(L)=0.
       CLEVAP(L)=0.
       CCNHTT(L)=0.
      END DO
C
      IF(NASER.GT.0.AND.ifed_inc.GE.0) THEN
      OPEN(1,FILE='aser.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,36
       READ(1,1)
      END DO
C
      DO N=1,NASER
C
      READ(1,*,IOSTAT=ISO) MASER(N),TCASER(N),TAASER(N),IRELH(N),
     $                RAINCVT,EVAPCVT,SOLRCVT,CLDCVT
      nxx=1

      IF(ISO.GT.0) GO TO 940
      READ(1,*,IOSTAT=ISO) IASWRAD,REVC,RCHC,SWRATNF,
     $  SWRATNS,FSWRATF,DABEDT,TBEDIT,HTBED1,HTBED2
      nxx=2
      IF(ISO.GT.0) GO TO 940
C
      DO M=1,MASER(N)
      READ(1,*,IOSTAT=ISO)TASER(M,N),PATM(M,N),TDRY(M,N),
     $       TWET(M,N),RAIN(M,N),EVAP(M,N),SOLSWR(M,N),CLOUD(M,N)
      nxx=3
      IF(ISO.GT.0) GO TO 940
      END DO
C
      DO M=1,MASER(N)
      TASER(M,N)=TASER(M,N)+TAASER(N)
      RAIN(M,N)=RAINCVT*RAIN(M,N)
      EVAP(M,N)=EVAPCVT*EVAP(M,N)
      SOLSWR(M,N)=SOLRCVT*SOLSWR(M,N)
      CLOUD(M,N)=CLDCVT*CLOUD(M,N)
      END DO
C
      END DO
C
      CLOSE(1)
      END IF
C
      IF(NASER.LE.1) THEN
        DO L=2,LA
         ATMWHT(L,1)=1.
        END DO
      END IF
C
      IF(NASER.GT.1) THEN
        OPEN(1,FILE='atmmap.inp',STATUS='UNKNOWN')
        DO IS=1,4
          READ(1,1)
        END DO
        DO L=2,LA
          READ(1,*)LD,ID,JD,(ATMWHT(L,N),N=1,NASER)
        END DO
        CLOSE(1)
      END IF
C
      TEMB(1)=TBEDIT
      TEMB(LC)=TBEDIT
      TEMB1(1)=TBEDIT
      TEMB1(LC)=TBEDIT
C
      IF(ISRESTI.EQ.0) THEN
        DO L=2,LA
         TEMB(L)=TBEDIT
         TEMB1(L)=TBEDIT  ! temb1(L) is not used for anything, Ji, 10/31/00
        END DO
      END IF
c
cdia      WRITE(6,6776)'read aser.inp'
c
C**********************************************************************C
C
C **  READ IN ABOVE WATER SURFACE WIND TIME SERIES FROM THE
C **  FILE wser.inp
C
C----------------------------------------------------------------------C
C
C     INITIALIZE WIND STRESS AND SPEED
C
      DO L=2,LA
        WINDST(L)=0.
        TSX(L)=0.
        TSY(L)=0.
      END DO
C
      IF(NWSER.GT.0) THEN
      if(ilong.eq.0) then
	OPEN(1,FILE='wser.inp',STATUS='UNKNOWN')
      else
	 IF(NWSER.GT.100) then
        OPEN(1,FILE='wser1_'//iyear//'.inp',STATUS='UNKNOWN') 
       ELSE
        OPEN(1,FILE='wser_'//iyear//'.inp',STATUS='UNKNOWN')  ! wser.inp
       ENDIF
      endif
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
c      DO IS=1,19
      DO IS=1,17
      READ(1,1)
      END DO
C
      DO N=1,NWSER
C
      READ(1,*,IOSTAT=ISO) MWSER(N),TCWSER(N),TAWSER(N),WINDSCT,
c     $                      ISWDINT(N)
     $                      ISWDINT(N),WCUT  ! Ji, 9/7/01
c     $                      ISWDINT(N),WSHELE,WSHELN
      nxx=4
      IF(ISO.GT.0) GO TO 940
C
      DO M=1,MWSER(N)
      READ(1,*,IOSTAT=ISO)TWSER(M,N),WINDS(M,N),WINDD(M,N)
	if(WINDS(M,N).GT.WCUT) WINDS(M,N)=WCUT
!	if(ISWDINT(N).EQ.3.and.WINDD(M,N).GT.WCUT) WINDD(M,N)= WCUT
!      nxx=5
      IF(ISO.GT.0) GO TO 940
      END DO
C
      DO M=1,MWSER(N)
       TWSER(M,N)=TWSER(M,N)+TAWSER(N)+tplus
      END DO
C
      IF(ISWDINT(N).LE.1) THEN
      DO M=1,MWSER(N)
       WINDS(M,N)=WINDSCT*WINDS(M,N)
      END DO
      END IF
C
      IF(ISWDINT(N).EQ.1) THEN
      DO M=1,MWSER(N)
        IF(WINDD(M,N).LE.180.) THEN
          WINDD(M,N)=WINDD(M,N)+180.
          IF(WINDD(M,N).EQ.360.) WINDD(M,N)=0.
         ELSE
          WINDD(M,N)=WINDD(M,N)-180.
          IF(WINDD(M,N).EQ.360.) WINDD(M,N)=0.
        END IF
      END DO
      END IF
C
      IF(ISWDINT(N).EQ.2) THEN
      DO M=1,MWSER(N)
       WINDS(M,N)=WINDSCT*WINDS(M,N)
       WINDD(M,N)=WINDSCT*WINDD(M,N)
      END DO
      END IF
C
      END DO
C
      CLOSE(1)
      END IF
C
      IF(NWSER.LE.1) THEN
        DO L=2,LA
         WNDWHT(L,1)=1.
        END DO
      END IF
C
      IF(NWSER.GT.1) THEN

	 IF(NWSER.LT.100) then
        if(ilong.eq.1) then
	  OPEN(1,FILE='wndmap_'//iyear//'.inp',STATUS='UNKNOWN')
        else      
         OPEN(1,FILE='wndmap.inp',STATUS='UNKNOWN')
        endif
	  DO IS=1,4
          READ(1,1)
        END DO
        DO L=2,LA
          READ(1,*)LD,ID,JD,(WNDWHT(LD,N),N=1,NWSER)
        END DO
        CLOSE(1)

	 ELSE
	  OPEN(1,FILE='wndmap1_'//iyear//'.inp',STATUS='UNKNOWN')  ! new format
	  DO IS=1,4
          READ(1,1)
        END DO
        DO L=2,LA
          READ(1,*)LD,ID,JD,IDt,((IDWNDW(LD,N),WNDWHT(LD,N)),N=1,10)     ! Read weight for 10 nearby station
        END DO
        CLOSE(1)
	 ENDIF


        OPEN(1,FILE='wndmap.inp',STATUS='UNKNOWN')
        DO IS=1,4
          READ(1,1)
        END DO
        DO L=2,LA
          READ(1,*)LD,ID,JD,(WNDWHT(LD,N),N=1,NWSER)
        END DO
        CLOSE(1)
      END IF
c
cdia      WRITE(6,6776)'read wser.inp'
c
C**********************************************************************C
C
C **  READ IN SHELL FISH LARAVE BEHAVIOR DATA
C **  FROM THE FILE sfbser.inp
C
C----------------------------------------------------------------------C
C
      IF(ISTRAN(4).GE.1) THEN
        OPEN(1,FILE='sfbser.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
      DO IS=1,18
      READ(1,1)
      END DO
C
      READ(1,*,IOSTAT=ISO) MSFSER,TCSFSER,TASFSER,TSRSF,TSSSF,
     $                     ISSFLDN,ISSFLFE,SFLKILL
      IF(ISO.GT.0) GO TO 960
C
      DO M=1,MSFSER
      READ(1,*,IOSTAT=ISO) TSFSER(M),RKDSFL(M),WSFLST(M),WSFLSM(M),
     $                     DSFLMN(M),DSFLMX(M),SFNTBE(M),SFATBT(M)
      IF(ISO.GT.0) GO TO 960
      END DO
C
      CLOSE(1)
C
      END IF
C
C**********************************************************************C
C
C **  READ IN HARMONIC TIDE GAUGE DATA FOR TIDE ELEVAVTION
C **  ASSIMULATION FROM FILE tidasm.inp
C
C----------------------------------------------------------------------C
C
c      IF(ITIDASM.GE.1) THEN
c        OPEN(1,FILE='tidasm.inp',STATUS='UNKNOWN')
C
C **  SKIP OVER TITLE AND AND HEADER LINES
C
c      DO IS=1,25
c      READ(1,1)
c      END DO
C
c      READ(1,*,IOSTAT=ISO) MLTIDAMS, MTTIDASM
c      IF(ISO.GT.0) GO TO 960
C
c      DO ML=1,MLTIDAMS
c      READ(1,*,IOSTAT=ISO) IITIDASM(ML),JJTIDASM(ML),TTIDASM(ML)
c      IF(ISO.GT.0) GO TO 970
c        DO MT=1,MTIDE
c          READ(1,*,IOSTAT=ISO)PFAM(ML,MT), PFPH(ML,MT)
c          IF(ISO.GT.0) GO TO 970
c        END DO
c      END DO
C
c      CLOSE(1)
C
c      END IF
C
C**********************************************************************C
C
      GO TO 3000
C
C**********************************************************************C
C
C **  WRITE READ ERROR FOR OTHER INPUT FILES AND TERMINATE RUN
C
  800 WRITE(6,801)
      WRITE(8,801)
  801 FORMAT(1X,'READ ERROR FOR FILE cell.inp ')
      STOP
  810 WRITE(6,811)
      WRITE(8,811)
  811 FORMAT(1X,'READ ERROR FOR FILE celllt.inp ')
      STOP
  820 WRITE(6,821)
      WRITE(8,821)
  821 FORMAT(1X,'READ ERROR FOR FILE depth.inp ')
      STOP
  830 WRITE(6,831)
      WRITE(8,831)
  831 FORMAT(1X,'READ ERROR FOR FILE dxdy.inp ')
      STOP
  840 WRITE(6,841)
      WRITE(8,841)
  841 FORMAT(1X,'READ ERROR FOR FILE salt.inp ')
      STOP
  842 WRITE(6,843)
      WRITE(8,843)
  843 FORMAT(1X,'READ ERROR FOR FILE temp.inp ')
      STOP
  844 WRITE(6,845)
      WRITE(8,845)
  845 FORMAT(1X,'READ ERROR FOR FILE dye.inp ')
      STOP
  846 WRITE(6,847)
      WRITE(8,847)
  847 FORMAT(1X,'READ ERROR FOR FILE sfl.inp ')
      STOP
  848 WRITE(6,849)
      WRITE(8,849)
  849 FORMAT(1X,'READ ERROR FOR FILE toxw.inp ')
      STOP
  852 WRITE(6,853)
      WRITE(8,853)
  853 FORMAT(1X,'READ ERROR FOR FILE toxb.inp ')
      STOP
  850 WRITE(6,851)
      WRITE(8,851)
  851 FORMAT(1X,'READ ERROR FOR FILE pser.inp ')
      STOP
  854 WRITE(6,855)
      WRITE(8,855)
  855 FORMAT(1X,'READ ERROR FOR FILE sedw.inp ')
      STOP
  856 WRITE(6,857)
      WRITE(8,857)
  857 FORMAT(1X,'READ ERROR FOR FILE sedb.inp ')
      STOP
  858 WRITE(6,859)
      WRITE(8,859)
  859 FORMAT(1X,'READ ERROR FOR FILE sndw.inp ')
      STOP
  862 WRITE(6,863)
      WRITE(8,863)
  863 FORMAT(1X,'READ ERROR FOR FILE sndb.inp ')
      STOP
  860 WRITE(6,861) (NS-1),(M-1)    ! Ji, 12/1/01
      WRITE(8,861)
  861 FORMAT(1X,'READ ERROR FOR FILE qser.inp, NS, M = ', 9i9)
      STOP
  865 WRITE(6,866)
      WRITE(8,866)
  866 FORMAT(1X,'READ ERROR FOR FILE qwrs.inp ')
      STOP
  870 WRITE(6,871)
      WRITE(8,871)
  871 FORMAT(1X,'READ ERROR FOR FILE sser.inp ')
      STOP
  880 WRITE(6,881)
      WRITE(8,881)
  881 FORMAT(1X,'READ ERROR FOR FILE tser.inp ')
      STOP
  890 WRITE(6,891)
      WRITE(8,891)
  891 FORMAT(1X,'READ ERROR FOR FILE dser.inp ')
      STOP
  900 WRITE(6,901)
      WRITE(8,901)
  901 FORMAT(1X,'READ ERROR FOR FILE sdser.inp ')
      STOP
  902 WRITE(6,903)
      WRITE(8,903)
  903 FORMAT(1X,'READ ERROR FOR FILE snser.inp ')
      STOP
  904 WRITE(6,905)
      WRITE(8,905)
  905 FORMAT(1X,'READ ERROR FOR FILE txser.inp ')
      STOP
  910 WRITE(6,911)
      WRITE(8,911)
  911 FORMAT(1X,'READ ERROR FOR FILE sfser.inp ')
      STOP
  920 WRITE(6,921)
      WRITE(8,921)
  921 FORMAT(1X,'READ ERROR FOR FILE qctl.inp ')
      STOP
C 930 WRITE(6,931)
C 931 FORMAT(1X,'READ ERROR FOR FILE qcool.inp ')
C     STOP
  940 WRITE(6,941) N,M, NXX
      WRITE(8,941)
  941 FORMAT(1X,'READ ERROR FOR FILE aser.inp or wser.inp, N,M = ', 3i6)
      STOP
  950 WRITE(6,951)
      WRITE(8,951)
  951 FORMAT(1X,'READ ERROR FOR FILE mappgns.inp ')
      STOP
  960 WRITE(6,961)
      WRITE(8,961)
  961 FORMAT(1X,'READ ERROR FOR FILE sfbser.inp ')
      STOP
  970 WRITE(6,971)
      WRITE(8,971)
  971 FORMAT(1X,'READ ERROR FOR FILE tidasm.inp ')
      STOP
C
 3000 CONTINUE
C
C**********************************************************************C
C
      RETURN
      END
